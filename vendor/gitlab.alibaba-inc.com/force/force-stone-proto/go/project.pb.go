// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

package gitaly

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateProjectRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateProjectRequest) Reset()         { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()    {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{0}
}

func (m *CreateProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectRequest.Unmarshal(m, b)
}
func (m *CreateProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectRequest.Marshal(b, m, deterministic)
}
func (m *CreateProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectRequest.Merge(m, src)
}
func (m *CreateProjectRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProjectRequest.Size(m)
}
func (m *CreateProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectRequest proto.InternalMessageInfo

func (m *CreateProjectRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type CreateProjectResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProjectResponse) Reset()         { *m = CreateProjectResponse{} }
func (m *CreateProjectResponse) String() string { return proto.CompactTextString(m) }
func (*CreateProjectResponse) ProtoMessage()    {}
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{1}
}

func (m *CreateProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectResponse.Unmarshal(m, b)
}
func (m *CreateProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectResponse.Marshal(b, m, deterministic)
}
func (m *CreateProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectResponse.Merge(m, src)
}
func (m *CreateProjectResponse) XXX_Size() int {
	return xxx_messageInfo_CreateProjectResponse.Size(m)
}
func (m *CreateProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectResponse proto.InternalMessageInfo

func (m *CreateProjectResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type RemoveProjectRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RemoveProjectRequest) Reset()         { *m = RemoveProjectRequest{} }
func (m *RemoveProjectRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveProjectRequest) ProtoMessage()    {}
func (*RemoveProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{2}
}

func (m *RemoveProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveProjectRequest.Unmarshal(m, b)
}
func (m *RemoveProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveProjectRequest.Marshal(b, m, deterministic)
}
func (m *RemoveProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveProjectRequest.Merge(m, src)
}
func (m *RemoveProjectRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveProjectRequest.Size(m)
}
func (m *RemoveProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveProjectRequest proto.InternalMessageInfo

func (m *RemoveProjectRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type RemoveProjectResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveProjectResponse) Reset()         { *m = RemoveProjectResponse{} }
func (m *RemoveProjectResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveProjectResponse) ProtoMessage()    {}
func (*RemoveProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{3}
}

func (m *RemoveProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveProjectResponse.Unmarshal(m, b)
}
func (m *RemoveProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveProjectResponse.Marshal(b, m, deterministic)
}
func (m *RemoveProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveProjectResponse.Merge(m, src)
}
func (m *RemoveProjectResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveProjectResponse.Size(m)
}
func (m *RemoveProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveProjectResponse proto.InternalMessageInfo

func (m *RemoveProjectResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ForkProjectRequest struct {
	OriginalRepository   *Repository `protobuf:"bytes,1,opt,name=originalRepository,proto3" json:"originalRepository,omitempty"`
	NewNamespace         *Namespace  `protobuf:"bytes,2,opt,name=newNamespace,proto3" json:"newNamespace,omitempty"`
	RemoteIp             string      `protobuf:"bytes,3,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	GlRepositoryId       int64       `protobuf:"varint,4,opt,name=gl_repository_id,json=glRepositoryId,proto3" json:"gl_repository_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ForkProjectRequest) Reset()         { *m = ForkProjectRequest{} }
func (m *ForkProjectRequest) String() string { return proto.CompactTextString(m) }
func (*ForkProjectRequest) ProtoMessage()    {}
func (*ForkProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{4}
}

func (m *ForkProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForkProjectRequest.Unmarshal(m, b)
}
func (m *ForkProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForkProjectRequest.Marshal(b, m, deterministic)
}
func (m *ForkProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkProjectRequest.Merge(m, src)
}
func (m *ForkProjectRequest) XXX_Size() int {
	return xxx_messageInfo_ForkProjectRequest.Size(m)
}
func (m *ForkProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForkProjectRequest proto.InternalMessageInfo

func (m *ForkProjectRequest) GetOriginalRepository() *Repository {
	if m != nil {
		return m.OriginalRepository
	}
	return nil
}

func (m *ForkProjectRequest) GetNewNamespace() *Namespace {
	if m != nil {
		return m.NewNamespace
	}
	return nil
}

func (m *ForkProjectRequest) GetRemoteIp() string {
	if m != nil {
		return m.RemoteIp
	}
	return ""
}

func (m *ForkProjectRequest) GetGlRepositoryId() int64 {
	if m != nil {
		return m.GlRepositoryId
	}
	return 0
}

type ForkProjectResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForkProjectResponse) Reset()         { *m = ForkProjectResponse{} }
func (m *ForkProjectResponse) String() string { return proto.CompactTextString(m) }
func (*ForkProjectResponse) ProtoMessage()    {}
func (*ForkProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{5}
}

func (m *ForkProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForkProjectResponse.Unmarshal(m, b)
}
func (m *ForkProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForkProjectResponse.Marshal(b, m, deterministic)
}
func (m *ForkProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkProjectResponse.Merge(m, src)
}
func (m *ForkProjectResponse) XXX_Size() int {
	return xxx_messageInfo_ForkProjectResponse.Size(m)
}
func (m *ForkProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForkProjectResponse proto.InternalMessageInfo

func (m *ForkProjectResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type MoveProjectRequest struct {
	OldRepository        *Repository `protobuf:"bytes,1,opt,name=oldRepository,proto3" json:"oldRepository,omitempty"`
	NewRepository        *Repository `protobuf:"bytes,2,opt,name=newRepository,proto3" json:"newRepository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MoveProjectRequest) Reset()         { *m = MoveProjectRequest{} }
func (m *MoveProjectRequest) String() string { return proto.CompactTextString(m) }
func (*MoveProjectRequest) ProtoMessage()    {}
func (*MoveProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{6}
}

func (m *MoveProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveProjectRequest.Unmarshal(m, b)
}
func (m *MoveProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveProjectRequest.Marshal(b, m, deterministic)
}
func (m *MoveProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveProjectRequest.Merge(m, src)
}
func (m *MoveProjectRequest) XXX_Size() int {
	return xxx_messageInfo_MoveProjectRequest.Size(m)
}
func (m *MoveProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveProjectRequest proto.InternalMessageInfo

func (m *MoveProjectRequest) GetOldRepository() *Repository {
	if m != nil {
		return m.OldRepository
	}
	return nil
}

func (m *MoveProjectRequest) GetNewRepository() *Repository {
	if m != nil {
		return m.NewRepository
	}
	return nil
}

type MoveProjectResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveProjectResponse) Reset()         { *m = MoveProjectResponse{} }
func (m *MoveProjectResponse) String() string { return proto.CompactTextString(m) }
func (*MoveProjectResponse) ProtoMessage()    {}
func (*MoveProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{7}
}

func (m *MoveProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveProjectResponse.Unmarshal(m, b)
}
func (m *MoveProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveProjectResponse.Marshal(b, m, deterministic)
}
func (m *MoveProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveProjectResponse.Merge(m, src)
}
func (m *MoveProjectResponse) XXX_Size() int {
	return xxx_messageInfo_MoveProjectResponse.Size(m)
}
func (m *MoveProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoveProjectResponse proto.InternalMessageInfo

func (m *MoveProjectResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ImportProjectRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	ImportUrl            string      `protobuf:"bytes,2,opt,name=importUrl,proto3" json:"importUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ImportProjectRequest) Reset()         { *m = ImportProjectRequest{} }
func (m *ImportProjectRequest) String() string { return proto.CompactTextString(m) }
func (*ImportProjectRequest) ProtoMessage()    {}
func (*ImportProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{8}
}

func (m *ImportProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportProjectRequest.Unmarshal(m, b)
}
func (m *ImportProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportProjectRequest.Marshal(b, m, deterministic)
}
func (m *ImportProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportProjectRequest.Merge(m, src)
}
func (m *ImportProjectRequest) XXX_Size() int {
	return xxx_messageInfo_ImportProjectRequest.Size(m)
}
func (m *ImportProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportProjectRequest proto.InternalMessageInfo

func (m *ImportProjectRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ImportProjectRequest) GetImportUrl() string {
	if m != nil {
		return m.ImportUrl
	}
	return ""
}

type OperateLockRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OperateLockRequest) Reset()         { *m = OperateLockRequest{} }
func (m *OperateLockRequest) String() string { return proto.CompactTextString(m) }
func (*OperateLockRequest) ProtoMessage()    {}
func (*OperateLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{9}
}

func (m *OperateLockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperateLockRequest.Unmarshal(m, b)
}
func (m *OperateLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperateLockRequest.Marshal(b, m, deterministic)
}
func (m *OperateLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperateLockRequest.Merge(m, src)
}
func (m *OperateLockRequest) XXX_Size() int {
	return xxx_messageInfo_OperateLockRequest.Size(m)
}
func (m *OperateLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OperateLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OperateLockRequest proto.InternalMessageInfo

func (m *OperateLockRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type ImportProjectResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportProjectResponse) Reset()         { *m = ImportProjectResponse{} }
func (m *ImportProjectResponse) String() string { return proto.CompactTextString(m) }
func (*ImportProjectResponse) ProtoMessage()    {}
func (*ImportProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{10}
}

func (m *ImportProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportProjectResponse.Unmarshal(m, b)
}
func (m *ImportProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportProjectResponse.Marshal(b, m, deterministic)
}
func (m *ImportProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportProjectResponse.Merge(m, src)
}
func (m *ImportProjectResponse) XXX_Size() int {
	return xxx_messageInfo_ImportProjectResponse.Size(m)
}
func (m *ImportProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportProjectResponse proto.InternalMessageInfo

func (m *ImportProjectResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type TransferProjectRequest struct {
	OldRepository        *Repository `protobuf:"bytes,1,opt,name=oldRepository,proto3" json:"oldRepository,omitempty"`
	NewRepository        *Repository `protobuf:"bytes,2,opt,name=newRepository,proto3" json:"newRepository,omitempty"`
	RemoteIp             string      `protobuf:"bytes,3,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TransferProjectRequest) Reset()         { *m = TransferProjectRequest{} }
func (m *TransferProjectRequest) String() string { return proto.CompactTextString(m) }
func (*TransferProjectRequest) ProtoMessage()    {}
func (*TransferProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{11}
}

func (m *TransferProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferProjectRequest.Unmarshal(m, b)
}
func (m *TransferProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferProjectRequest.Marshal(b, m, deterministic)
}
func (m *TransferProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferProjectRequest.Merge(m, src)
}
func (m *TransferProjectRequest) XXX_Size() int {
	return xxx_messageInfo_TransferProjectRequest.Size(m)
}
func (m *TransferProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferProjectRequest proto.InternalMessageInfo

func (m *TransferProjectRequest) GetOldRepository() *Repository {
	if m != nil {
		return m.OldRepository
	}
	return nil
}

func (m *TransferProjectRequest) GetNewRepository() *Repository {
	if m != nil {
		return m.NewRepository
	}
	return nil
}

func (m *TransferProjectRequest) GetRemoteIp() string {
	if m != nil {
		return m.RemoteIp
	}
	return ""
}

type TransferProjectResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferProjectResponse) Reset()         { *m = TransferProjectResponse{} }
func (m *TransferProjectResponse) String() string { return proto.CompactTextString(m) }
func (*TransferProjectResponse) ProtoMessage()    {}
func (*TransferProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{12}
}

func (m *TransferProjectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferProjectResponse.Unmarshal(m, b)
}
func (m *TransferProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferProjectResponse.Marshal(b, m, deterministic)
}
func (m *TransferProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferProjectResponse.Merge(m, src)
}
func (m *TransferProjectResponse) XXX_Size() int {
	return xxx_messageInfo_TransferProjectResponse.Size(m)
}
func (m *TransferProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferProjectResponse proto.InternalMessageInfo

func (m *TransferProjectResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type SyncGitRepoRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RemoteURL            string      `protobuf:"bytes,2,opt,name=remoteURL,proto3" json:"remoteURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SyncGitRepoRequest) Reset()         { *m = SyncGitRepoRequest{} }
func (m *SyncGitRepoRequest) String() string { return proto.CompactTextString(m) }
func (*SyncGitRepoRequest) ProtoMessage()    {}
func (*SyncGitRepoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{13}
}

func (m *SyncGitRepoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncGitRepoRequest.Unmarshal(m, b)
}
func (m *SyncGitRepoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncGitRepoRequest.Marshal(b, m, deterministic)
}
func (m *SyncGitRepoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncGitRepoRequest.Merge(m, src)
}
func (m *SyncGitRepoRequest) XXX_Size() int {
	return xxx_messageInfo_SyncGitRepoRequest.Size(m)
}
func (m *SyncGitRepoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncGitRepoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncGitRepoRequest proto.InternalMessageInfo

func (m *SyncGitRepoRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *SyncGitRepoRequest) GetRemoteURL() string {
	if m != nil {
		return m.RemoteURL
	}
	return ""
}

type SyncGitRepoResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncGitRepoResponse) Reset()         { *m = SyncGitRepoResponse{} }
func (m *SyncGitRepoResponse) String() string { return proto.CompactTextString(m) }
func (*SyncGitRepoResponse) ProtoMessage()    {}
func (*SyncGitRepoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{14}
}

func (m *SyncGitRepoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncGitRepoResponse.Unmarshal(m, b)
}
func (m *SyncGitRepoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncGitRepoResponse.Marshal(b, m, deterministic)
}
func (m *SyncGitRepoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncGitRepoResponse.Merge(m, src)
}
func (m *SyncGitRepoResponse) XXX_Size() int {
	return xxx_messageInfo_SyncGitRepoResponse.Size(m)
}
func (m *SyncGitRepoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncGitRepoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncGitRepoResponse proto.InternalMessageInfo

func (m *SyncGitRepoResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type OperateLockResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperateLockResponse) Reset()         { *m = OperateLockResponse{} }
func (m *OperateLockResponse) String() string { return proto.CompactTextString(m) }
func (*OperateLockResponse) ProtoMessage()    {}
func (*OperateLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8340e6318dfdfac2, []int{15}
}

func (m *OperateLockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperateLockResponse.Unmarshal(m, b)
}
func (m *OperateLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperateLockResponse.Marshal(b, m, deterministic)
}
func (m *OperateLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperateLockResponse.Merge(m, src)
}
func (m *OperateLockResponse) XXX_Size() int {
	return xxx_messageInfo_OperateLockResponse.Size(m)
}
func (m *OperateLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperateLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperateLockResponse proto.InternalMessageInfo

func (m *OperateLockResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*CreateProjectRequest)(nil), "gitaly.CreateProjectRequest")
	proto.RegisterType((*CreateProjectResponse)(nil), "gitaly.CreateProjectResponse")
	proto.RegisterType((*RemoveProjectRequest)(nil), "gitaly.RemoveProjectRequest")
	proto.RegisterType((*RemoveProjectResponse)(nil), "gitaly.RemoveProjectResponse")
	proto.RegisterType((*ForkProjectRequest)(nil), "gitaly.ForkProjectRequest")
	proto.RegisterType((*ForkProjectResponse)(nil), "gitaly.ForkProjectResponse")
	proto.RegisterType((*MoveProjectRequest)(nil), "gitaly.MoveProjectRequest")
	proto.RegisterType((*MoveProjectResponse)(nil), "gitaly.MoveProjectResponse")
	proto.RegisterType((*ImportProjectRequest)(nil), "gitaly.ImportProjectRequest")
	proto.RegisterType((*OperateLockRequest)(nil), "gitaly.OperateLockRequest")
	proto.RegisterType((*ImportProjectResponse)(nil), "gitaly.ImportProjectResponse")
	proto.RegisterType((*TransferProjectRequest)(nil), "gitaly.TransferProjectRequest")
	proto.RegisterType((*TransferProjectResponse)(nil), "gitaly.TransferProjectResponse")
	proto.RegisterType((*SyncGitRepoRequest)(nil), "gitaly.SyncGitRepoRequest")
	proto.RegisterType((*SyncGitRepoResponse)(nil), "gitaly.SyncGitRepoResponse")
	proto.RegisterType((*OperateLockResponse)(nil), "gitaly.OperateLockResponse")
}

func init() { proto.RegisterFile("project.proto", fileDescriptor_8340e6318dfdfac2) }

var fileDescriptor_8340e6318dfdfac2 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xd1, 0x6e, 0xd3, 0x4a,
	0x10, 0x8d, 0xdb, 0xdb, 0xaa, 0x9d, 0x36, 0xb9, 0x65, 0x1a, 0x4a, 0x64, 0x0a, 0x44, 0x7e, 0x8a,
	0x54, 0x61, 0xa4, 0x20, 0x24, 0x9e, 0x8b, 0x04, 0x0d, 0x34, 0xa5, 0xda, 0x36, 0xcf, 0xd5, 0xc6,
	0x99, 0xa4, 0xa6, 0x8e, 0xd7, 0xac, 0xdd, 0x54, 0xf9, 0x03, 0x3e, 0x85, 0xef, 0x41, 0xe2, 0x7f,
	0x90, 0x63, 0x9c, 0xb5, 0xe3, 0x8d, 0x15, 0x29, 0x95, 0x78, 0xcc, 0xce, 0xcc, 0x99, 0x39, 0x9e,
	0x33, 0x47, 0x81, 0x6a, 0x20, 0xc5, 0x37, 0x72, 0x22, 0x3b, 0x90, 0x22, 0x12, 0xb8, 0x3d, 0x72,
	0x23, 0xee, 0x4d, 0xcd, 0xfd, 0xf0, 0x96, 0x4b, 0x1a, 0x24, 0xaf, 0xd6, 0x67, 0xa8, 0x7f, 0x90,
	0xc4, 0x23, 0xba, 0x4c, 0x92, 0x19, 0x7d, 0xbf, 0xa7, 0x30, 0xc2, 0x36, 0x80, 0xa4, 0x40, 0x84,
	0x6e, 0x24, 0xe4, 0xb4, 0x61, 0x34, 0x8d, 0xd6, 0x5e, 0x1b, 0xed, 0x04, 0xc2, 0x66, 0xf3, 0x08,
	0xcb, 0x64, 0x59, 0xaf, 0xe1, 0xe9, 0x02, 0x56, 0x18, 0x08, 0x3f, 0x24, 0xac, 0xc3, 0xd6, 0x84,
	0x7b, 0xf7, 0x34, 0xc3, 0xd9, 0x61, 0xc9, 0x8f, 0xb8, 0x35, 0xa3, 0xb1, 0x98, 0x3c, 0x52, 0xeb,
	0x05, 0xac, 0xd2, 0xd6, 0xbf, 0x0d, 0xc0, 0x8f, 0x42, 0xde, 0x2d, 0x74, 0x3e, 0x05, 0x14, 0xd2,
	0x1d, 0xb9, 0x3e, 0xf7, 0xd8, 0x2a, 0x13, 0x68, 0xb2, 0xf1, 0x1d, 0xec, 0xfb, 0xf4, 0x70, 0xc1,
	0xc7, 0x14, 0x06, 0xdc, 0xa1, 0xc6, 0xc6, 0xac, 0xfa, 0x49, 0x5a, 0x3d, 0x0f, 0xb0, 0x5c, 0x1a,
	0x9a, 0xb0, 0x23, 0x69, 0x2c, 0x22, 0xea, 0x04, 0x8d, 0xcd, 0xa6, 0xd1, 0xda, 0x65, 0xf3, 0xdf,
	0xd8, 0x82, 0x83, 0x91, 0x77, 0xa3, 0xd8, 0xde, 0xb8, 0x83, 0xc6, 0x7f, 0x4d, 0xa3, 0xb5, 0xc9,
	0x6a, 0xa3, 0x4c, 0xeb, 0xce, 0xc0, 0x3a, 0x81, 0xc3, 0x1c, 0xad, 0xd2, 0x8f, 0xf0, 0xc3, 0x00,
	0xec, 0x16, 0x3f, 0xff, 0x7b, 0xa8, 0x0a, 0x6f, 0xb0, 0x12, 0xff, 0x7c, 0x62, 0x5c, 0xe9, 0xd3,
	0x43, 0xa6, 0x72, 0x63, 0x79, 0x65, 0x2e, 0x31, 0x9e, 0xbb, 0xbb, 0xf2, 0xf2, 0x6e, 0xa1, 0xde,
	0x19, 0x07, 0x42, 0x46, 0xeb, 0xeb, 0x06, 0x8f, 0x61, 0xd7, 0x9d, 0x61, 0xf5, 0xa4, 0x37, 0x1b,
	0x77, 0x97, 0xa9, 0x07, 0xeb, 0x0c, 0xf0, 0x6b, 0x40, 0x92, 0x47, 0x74, 0x2e, 0x9c, 0xbb, 0x35,
	0xf5, 0xb9, 0x30, 0x73, 0x29, 0xc5, 0x9f, 0x06, 0x1c, 0x5d, 0x4b, 0xee, 0x87, 0x43, 0x92, 0xff,
	0x7e, 0x3d, 0x65, 0xe2, 0xb4, 0xde, 0xc0, 0xb3, 0xc2, 0xa4, 0xa5, 0xdc, 0x86, 0x80, 0x57, 0x53,
	0xdf, 0xf9, 0xe4, 0x46, 0x71, 0x87, 0x35, 0x97, 0x97, 0x8c, 0xd1, 0x63, 0xe7, 0xe9, 0xf2, 0xe6,
	0x0f, 0xb1, 0xa6, 0x72, 0x7d, 0x4a, 0x87, 0x3a, 0x81, 0xc3, 0xdc, 0xa6, 0xcb, 0x92, 0xdb, 0xbf,
	0xb6, 0xa0, 0xf6, 0x97, 0xeb, 0x15, 0xc9, 0x89, 0xeb, 0x10, 0x5e, 0x40, 0x35, 0x67, 0x7d, 0x78,
	0x9c, 0xce, 0xae, 0x73, 0x57, 0xf3, 0xc5, 0x92, 0x68, 0xd2, 0xd6, 0xaa, 0xc4, 0x78, 0x39, 0x3f,
	0x53, 0x78, 0x3a, 0xcb, 0x54, 0x78, 0x5a, 0x13, 0xb4, 0x2a, 0x78, 0x06, 0x7b, 0x19, 0x63, 0x40,
	0x33, 0xcd, 0x2f, 0x9a, 0xa0, 0xf9, 0x5c, 0x1b, 0xcb, 0x22, 0x65, 0x4e, 0x55, 0x21, 0x15, 0x9d,
	0x44, 0x21, 0x75, 0xb5, 0x33, 0x5d, 0x42, 0x35, 0x77, 0x13, 0x8a, 0xa3, 0xee, 0xbc, 0x15, 0x47,
	0xed, 0x21, 0x59, 0x95, 0x96, 0x81, 0xd7, 0xf0, 0xff, 0x82, 0x16, 0xf1, 0x65, 0x5a, 0xa5, 0x3f,
	0x27, 0xf3, 0xd5, 0xd2, 0x78, 0x96, 0x71, 0x46, 0x48, 0x8a, 0x71, 0x51, 0xc5, 0x8a, 0xb1, 0x46,
	0x79, 0x56, 0x05, 0xbf, 0x40, 0x2d, 0x91, 0x97, 0xba, 0xac, 0xb4, 0xa0, 0xe8, 0x33, 0x0a, 0x4c,
	0xa3, 0x4c, 0xab, 0x82, 0x5d, 0x38, 0xe8, 0xf9, 0xde, 0x63, 0xc1, 0x9d, 0x36, 0xe0, 0xc8, 0x11,
	0x63, 0x9b, 0x7b, 0x6e, 0x9f, 0xf7, 0xb9, 0x3d, 0x14, 0xd2, 0x21, 0x7b, 0x24, 0x03, 0xa7, 0xbf,
	0x3d, 0xfb, 0xa7, 0xf0, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xc4, 0xf3, 0x41, 0x50,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectServiceClient interface {
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error)
	ForkProject(ctx context.Context, in *ForkProjectRequest, opts ...grpc.CallOption) (*ForkProjectResponse, error)
	MoveProject(ctx context.Context, in *MoveProjectRequest, opts ...grpc.CallOption) (*MoveProjectResponse, error)
	ImportProject(ctx context.Context, opts ...grpc.CallOption) (ProjectService_ImportProjectClient, error)
	TransferProject(ctx context.Context, in *TransferProjectRequest, opts ...grpc.CallOption) (*TransferProjectResponse, error)
	// 跨机房同步使用
	SyncGitRepo(ctx context.Context, in *SyncGitRepoRequest, opts ...grpc.CallOption) (*SyncGitRepoResponse, error)
	// Set the repository lock
	LockRepository(ctx context.Context, in *OperateLockRequest, opts ...grpc.CallOption) (*OperateLockResponse, error)
	// Unlock the repository
	UnlockRepository(ctx context.Context, in *OperateLockRequest, opts ...grpc.CallOption) (*OperateLockResponse, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error) {
	out := new(RemoveProjectResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/RemoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ForkProject(ctx context.Context, in *ForkProjectRequest, opts ...grpc.CallOption) (*ForkProjectResponse, error) {
	out := new(ForkProjectResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/ForkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) MoveProject(ctx context.Context, in *MoveProjectRequest, opts ...grpc.CallOption) (*MoveProjectResponse, error) {
	out := new(MoveProjectResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/MoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ImportProject(ctx context.Context, opts ...grpc.CallOption) (ProjectService_ImportProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProjectService_serviceDesc.Streams[0], "/gitaly.ProjectService/ImportProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceImportProjectClient{stream}
	return x, nil
}

type ProjectService_ImportProjectClient interface {
	Send(*ImportProjectRequest) error
	CloseAndRecv() (*ImportProjectResponse, error)
	grpc.ClientStream
}

type projectServiceImportProjectClient struct {
	grpc.ClientStream
}

func (x *projectServiceImportProjectClient) Send(m *ImportProjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectServiceImportProjectClient) CloseAndRecv() (*ImportProjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) TransferProject(ctx context.Context, in *TransferProjectRequest, opts ...grpc.CallOption) (*TransferProjectResponse, error) {
	out := new(TransferProjectResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/TransferProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SyncGitRepo(ctx context.Context, in *SyncGitRepoRequest, opts ...grpc.CallOption) (*SyncGitRepoResponse, error) {
	out := new(SyncGitRepoResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/SyncGitRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) LockRepository(ctx context.Context, in *OperateLockRequest, opts ...grpc.CallOption) (*OperateLockResponse, error) {
	out := new(OperateLockResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/LockRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UnlockRepository(ctx context.Context, in *OperateLockRequest, opts ...grpc.CallOption) (*OperateLockResponse, error) {
	out := new(OperateLockResponse)
	err := c.cc.Invoke(ctx, "/gitaly.ProjectService/UnlockRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
type ProjectServiceServer interface {
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error)
	ForkProject(context.Context, *ForkProjectRequest) (*ForkProjectResponse, error)
	MoveProject(context.Context, *MoveProjectRequest) (*MoveProjectResponse, error)
	ImportProject(ProjectService_ImportProjectServer) error
	TransferProject(context.Context, *TransferProjectRequest) (*TransferProjectResponse, error)
	// 跨机房同步使用
	SyncGitRepo(context.Context, *SyncGitRepoRequest) (*SyncGitRepoResponse, error)
	// Set the repository lock
	LockRepository(context.Context, *OperateLockRequest) (*OperateLockResponse, error)
	// Unlock the repository
	UnlockRepository(context.Context, *OperateLockRequest) (*OperateLockResponse, error)
}

// UnimplementedProjectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (*UnimplementedProjectServiceServer) CreateProject(ctx context.Context, req *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedProjectServiceServer) RemoveProject(ctx context.Context, req *RemoveProjectRequest) (*RemoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProject not implemented")
}
func (*UnimplementedProjectServiceServer) ForkProject(ctx context.Context, req *ForkProjectRequest) (*ForkProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForkProject not implemented")
}
func (*UnimplementedProjectServiceServer) MoveProject(ctx context.Context, req *MoveProjectRequest) (*MoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveProject not implemented")
}
func (*UnimplementedProjectServiceServer) ImportProject(srv ProjectService_ImportProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportProject not implemented")
}
func (*UnimplementedProjectServiceServer) TransferProject(ctx context.Context, req *TransferProjectRequest) (*TransferProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferProject not implemented")
}
func (*UnimplementedProjectServiceServer) SyncGitRepo(ctx context.Context, req *SyncGitRepoRequest) (*SyncGitRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGitRepo not implemented")
}
func (*UnimplementedProjectServiceServer) LockRepository(ctx context.Context, req *OperateLockRequest) (*OperateLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockRepository not implemented")
}
func (*UnimplementedProjectServiceServer) UnlockRepository(ctx context.Context, req *OperateLockRequest) (*OperateLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockRepository not implemented")
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/RemoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveProject(ctx, req.(*RemoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ForkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ForkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/ForkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ForkProject(ctx, req.(*ForkProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_MoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).MoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/MoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).MoveProject(ctx, req.(*MoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ImportProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectServiceServer).ImportProject(&projectServiceImportProjectServer{stream})
}

type ProjectService_ImportProjectServer interface {
	SendAndClose(*ImportProjectResponse) error
	Recv() (*ImportProjectRequest, error)
	grpc.ServerStream
}

type projectServiceImportProjectServer struct {
	grpc.ServerStream
}

func (x *projectServiceImportProjectServer) SendAndClose(m *ImportProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectServiceImportProjectServer) Recv() (*ImportProjectRequest, error) {
	m := new(ImportProjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProjectService_TransferProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).TransferProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/TransferProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).TransferProject(ctx, req.(*TransferProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SyncGitRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGitRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SyncGitRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/SyncGitRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SyncGitRepo(ctx, req.(*SyncGitRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_LockRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).LockRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/LockRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).LockRepository(ctx, req.(*OperateLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UnlockRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UnlockRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.ProjectService/UnlockRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UnlockRepository(ctx, req.(*OperateLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "RemoveProject",
			Handler:    _ProjectService_RemoveProject_Handler,
		},
		{
			MethodName: "ForkProject",
			Handler:    _ProjectService_ForkProject_Handler,
		},
		{
			MethodName: "MoveProject",
			Handler:    _ProjectService_MoveProject_Handler,
		},
		{
			MethodName: "TransferProject",
			Handler:    _ProjectService_TransferProject_Handler,
		},
		{
			MethodName: "SyncGitRepo",
			Handler:    _ProjectService_SyncGitRepo_Handler,
		},
		{
			MethodName: "LockRepository",
			Handler:    _ProjectService_LockRepository_Handler,
		},
		{
			MethodName: "UnlockRepository",
			Handler:    _ProjectService_UnlockRepository_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportProject",
			Handler:       _ProjectService_ImportProject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "project.proto",
}
