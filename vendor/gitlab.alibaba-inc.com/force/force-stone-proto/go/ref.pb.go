// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ref.proto

package gitaly

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindLocalBranchesRequest_SortBy int32

const (
	FindLocalBranchesRequest_NAME         FindLocalBranchesRequest_SortBy = 0
	FindLocalBranchesRequest_UPDATED_ASC  FindLocalBranchesRequest_SortBy = 1
	FindLocalBranchesRequest_UPDATED_DESC FindLocalBranchesRequest_SortBy = 2
)

var FindLocalBranchesRequest_SortBy_name = map[int32]string{
	0: "NAME",
	1: "UPDATED_ASC",
	2: "UPDATED_DESC",
}

var FindLocalBranchesRequest_SortBy_value = map[string]int32{
	"NAME":         0,
	"UPDATED_ASC":  1,
	"UPDATED_DESC": 2,
}

func (x FindLocalBranchesRequest_SortBy) String() string {
	return proto.EnumName(FindLocalBranchesRequest_SortBy_name, int32(x))
}

func (FindLocalBranchesRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{12, 0}
}

type RefsNameContainsCommitRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	CommitId             string      `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RefsNameContainsCommitRequest) Reset()         { *m = RefsNameContainsCommitRequest{} }
func (m *RefsNameContainsCommitRequest) String() string { return proto.CompactTextString(m) }
func (*RefsNameContainsCommitRequest) ProtoMessage()    {}
func (*RefsNameContainsCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{0}
}

func (m *RefsNameContainsCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefsNameContainsCommitRequest.Unmarshal(m, b)
}
func (m *RefsNameContainsCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefsNameContainsCommitRequest.Marshal(b, m, deterministic)
}
func (m *RefsNameContainsCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefsNameContainsCommitRequest.Merge(m, src)
}
func (m *RefsNameContainsCommitRequest) XXX_Size() int {
	return xxx_messageInfo_RefsNameContainsCommitRequest.Size(m)
}
func (m *RefsNameContainsCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefsNameContainsCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefsNameContainsCommitRequest proto.InternalMessageInfo

func (m *RefsNameContainsCommitRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RefsNameContainsCommitRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

type RefsNameContainsCommitResponse struct {
	RefsName             [][]byte `protobuf:"bytes,1,rep,name=refs_name,json=refsName,proto3" json:"refs_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefsNameContainsCommitResponse) Reset()         { *m = RefsNameContainsCommitResponse{} }
func (m *RefsNameContainsCommitResponse) String() string { return proto.CompactTextString(m) }
func (*RefsNameContainsCommitResponse) ProtoMessage()    {}
func (*RefsNameContainsCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{1}
}

func (m *RefsNameContainsCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefsNameContainsCommitResponse.Unmarshal(m, b)
}
func (m *RefsNameContainsCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefsNameContainsCommitResponse.Marshal(b, m, deterministic)
}
func (m *RefsNameContainsCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefsNameContainsCommitResponse.Merge(m, src)
}
func (m *RefsNameContainsCommitResponse) XXX_Size() int {
	return xxx_messageInfo_RefsNameContainsCommitResponse.Size(m)
}
func (m *RefsNameContainsCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefsNameContainsCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefsNameContainsCommitResponse proto.InternalMessageInfo

func (m *RefsNameContainsCommitResponse) GetRefsName() [][]byte {
	if m != nil {
		return m.RefsName
	}
	return nil
}

type FindDefaultBranchNameRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindDefaultBranchNameRequest) Reset()         { *m = FindDefaultBranchNameRequest{} }
func (m *FindDefaultBranchNameRequest) String() string { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameRequest) ProtoMessage()    {}
func (*FindDefaultBranchNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{2}
}

func (m *FindDefaultBranchNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindDefaultBranchNameRequest.Unmarshal(m, b)
}
func (m *FindDefaultBranchNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindDefaultBranchNameRequest.Marshal(b, m, deterministic)
}
func (m *FindDefaultBranchNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindDefaultBranchNameRequest.Merge(m, src)
}
func (m *FindDefaultBranchNameRequest) XXX_Size() int {
	return xxx_messageInfo_FindDefaultBranchNameRequest.Size(m)
}
func (m *FindDefaultBranchNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindDefaultBranchNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindDefaultBranchNameRequest proto.InternalMessageInfo

func (m *FindDefaultBranchNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindDefaultBranchNameResponse struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindDefaultBranchNameResponse) Reset()         { *m = FindDefaultBranchNameResponse{} }
func (m *FindDefaultBranchNameResponse) String() string { return proto.CompactTextString(m) }
func (*FindDefaultBranchNameResponse) ProtoMessage()    {}
func (*FindDefaultBranchNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{3}
}

func (m *FindDefaultBranchNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindDefaultBranchNameResponse.Unmarshal(m, b)
}
func (m *FindDefaultBranchNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindDefaultBranchNameResponse.Marshal(b, m, deterministic)
}
func (m *FindDefaultBranchNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindDefaultBranchNameResponse.Merge(m, src)
}
func (m *FindDefaultBranchNameResponse) XXX_Size() int {
	return xxx_messageInfo_FindDefaultBranchNameResponse.Size(m)
}
func (m *FindDefaultBranchNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindDefaultBranchNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindDefaultBranchNameResponse proto.InternalMessageInfo

func (m *FindDefaultBranchNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindAllBranchNamesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllBranchNamesRequest) Reset()         { *m = FindAllBranchNamesRequest{} }
func (m *FindAllBranchNamesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchNamesRequest) ProtoMessage()    {}
func (*FindAllBranchNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{4}
}

func (m *FindAllBranchNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchNamesRequest.Unmarshal(m, b)
}
func (m *FindAllBranchNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchNamesRequest.Marshal(b, m, deterministic)
}
func (m *FindAllBranchNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchNamesRequest.Merge(m, src)
}
func (m *FindAllBranchNamesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchNamesRequest.Size(m)
}
func (m *FindAllBranchNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchNamesRequest proto.InternalMessageInfo

func (m *FindAllBranchNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllBranchNamesResponse struct {
	Names                [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllBranchNamesResponse) Reset()         { *m = FindAllBranchNamesResponse{} }
func (m *FindAllBranchNamesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchNamesResponse) ProtoMessage()    {}
func (*FindAllBranchNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{5}
}

func (m *FindAllBranchNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchNamesResponse.Unmarshal(m, b)
}
func (m *FindAllBranchNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchNamesResponse.Marshal(b, m, deterministic)
}
func (m *FindAllBranchNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchNamesResponse.Merge(m, src)
}
func (m *FindAllBranchNamesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchNamesResponse.Size(m)
}
func (m *FindAllBranchNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchNamesResponse proto.InternalMessageInfo

func (m *FindAllBranchNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindAllTagNamesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllTagNamesRequest) Reset()         { *m = FindAllTagNamesRequest{} }
func (m *FindAllTagNamesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllTagNamesRequest) ProtoMessage()    {}
func (*FindAllTagNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{6}
}

func (m *FindAllTagNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagNamesRequest.Unmarshal(m, b)
}
func (m *FindAllTagNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagNamesRequest.Marshal(b, m, deterministic)
}
func (m *FindAllTagNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagNamesRequest.Merge(m, src)
}
func (m *FindAllTagNamesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllTagNamesRequest.Size(m)
}
func (m *FindAllTagNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagNamesRequest proto.InternalMessageInfo

func (m *FindAllTagNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagNamesResponse struct {
	Names                [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllTagNamesResponse) Reset()         { *m = FindAllTagNamesResponse{} }
func (m *FindAllTagNamesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllTagNamesResponse) ProtoMessage()    {}
func (*FindAllTagNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{7}
}

func (m *FindAllTagNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagNamesResponse.Unmarshal(m, b)
}
func (m *FindAllTagNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagNamesResponse.Marshal(b, m, deterministic)
}
func (m *FindAllTagNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagNamesResponse.Merge(m, src)
}
func (m *FindAllTagNamesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllTagNamesResponse.Size(m)
}
func (m *FindAllTagNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagNamesResponse proto.InternalMessageInfo

func (m *FindAllTagNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindRefNameRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Require that the resulting ref contains this commit as an ancestor
	CommitId string `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Example prefix: "refs/heads/". Type bytes because that is the type of ref names.
	Prefix               []byte   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRefNameRequest) Reset()         { *m = FindRefNameRequest{} }
func (m *FindRefNameRequest) String() string { return proto.CompactTextString(m) }
func (*FindRefNameRequest) ProtoMessage()    {}
func (*FindRefNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{8}
}

func (m *FindRefNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRefNameRequest.Unmarshal(m, b)
}
func (m *FindRefNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRefNameRequest.Marshal(b, m, deterministic)
}
func (m *FindRefNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRefNameRequest.Merge(m, src)
}
func (m *FindRefNameRequest) XXX_Size() int {
	return xxx_messageInfo_FindRefNameRequest.Size(m)
}
func (m *FindRefNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRefNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRefNameRequest proto.InternalMessageInfo

func (m *FindRefNameRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindRefNameRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *FindRefNameRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type FindRefNameResponse struct {
	// Example name: "refs/heads/master". Cannot assume UTF8, so the type is bytes.
	Name                 []byte   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRefNameResponse) Reset()         { *m = FindRefNameResponse{} }
func (m *FindRefNameResponse) String() string { return proto.CompactTextString(m) }
func (*FindRefNameResponse) ProtoMessage()    {}
func (*FindRefNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{9}
}

func (m *FindRefNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRefNameResponse.Unmarshal(m, b)
}
func (m *FindRefNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRefNameResponse.Marshal(b, m, deterministic)
}
func (m *FindRefNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRefNameResponse.Merge(m, src)
}
func (m *FindRefNameResponse) XXX_Size() int {
	return xxx_messageInfo_FindRefNameResponse.Size(m)
}
func (m *FindRefNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRefNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindRefNameResponse proto.InternalMessageInfo

func (m *FindRefNameResponse) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type FindPointAtRefNamesRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Require that the resulting ref point at this commit
	CommitId string `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// Example prefix: "refs/heads/". Type bytes because that is the type of ref names.
	Prefix               []byte   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindPointAtRefNamesRequest) Reset()         { *m = FindPointAtRefNamesRequest{} }
func (m *FindPointAtRefNamesRequest) String() string { return proto.CompactTextString(m) }
func (*FindPointAtRefNamesRequest) ProtoMessage()    {}
func (*FindPointAtRefNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{10}
}

func (m *FindPointAtRefNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindPointAtRefNamesRequest.Unmarshal(m, b)
}
func (m *FindPointAtRefNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindPointAtRefNamesRequest.Marshal(b, m, deterministic)
}
func (m *FindPointAtRefNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindPointAtRefNamesRequest.Merge(m, src)
}
func (m *FindPointAtRefNamesRequest) XXX_Size() int {
	return xxx_messageInfo_FindPointAtRefNamesRequest.Size(m)
}
func (m *FindPointAtRefNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindPointAtRefNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindPointAtRefNamesRequest proto.InternalMessageInfo

func (m *FindPointAtRefNamesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindPointAtRefNamesRequest) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *FindPointAtRefNamesRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type FindPointAtRefNamesResponse struct {
	// Example name: "refs/heads/master". Cannot assume UTF8, so the type is bytes.
	Names                [][]byte `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindPointAtRefNamesResponse) Reset()         { *m = FindPointAtRefNamesResponse{} }
func (m *FindPointAtRefNamesResponse) String() string { return proto.CompactTextString(m) }
func (*FindPointAtRefNamesResponse) ProtoMessage()    {}
func (*FindPointAtRefNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{11}
}

func (m *FindPointAtRefNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindPointAtRefNamesResponse.Unmarshal(m, b)
}
func (m *FindPointAtRefNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindPointAtRefNamesResponse.Marshal(b, m, deterministic)
}
func (m *FindPointAtRefNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindPointAtRefNamesResponse.Merge(m, src)
}
func (m *FindPointAtRefNamesResponse) XXX_Size() int {
	return xxx_messageInfo_FindPointAtRefNamesResponse.Size(m)
}
func (m *FindPointAtRefNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindPointAtRefNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindPointAtRefNamesResponse proto.InternalMessageInfo

func (m *FindPointAtRefNamesResponse) GetNames() [][]byte {
	if m != nil {
		return m.Names
	}
	return nil
}

type FindLocalBranchesRequest struct {
	Repository           *Repository                     `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	SortBy               FindLocalBranchesRequest_SortBy `protobuf:"varint,2,opt,name=sort_by,json=sortBy,proto3,enum=gitaly.FindLocalBranchesRequest_SortBy" json:"sort_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *FindLocalBranchesRequest) Reset()         { *m = FindLocalBranchesRequest{} }
func (m *FindLocalBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*FindLocalBranchesRequest) ProtoMessage()    {}
func (*FindLocalBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{12}
}

func (m *FindLocalBranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindLocalBranchesRequest.Unmarshal(m, b)
}
func (m *FindLocalBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindLocalBranchesRequest.Marshal(b, m, deterministic)
}
func (m *FindLocalBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindLocalBranchesRequest.Merge(m, src)
}
func (m *FindLocalBranchesRequest) XXX_Size() int {
	return xxx_messageInfo_FindLocalBranchesRequest.Size(m)
}
func (m *FindLocalBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindLocalBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindLocalBranchesRequest proto.InternalMessageInfo

func (m *FindLocalBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindLocalBranchesRequest) GetSortBy() FindLocalBranchesRequest_SortBy {
	if m != nil {
		return m.SortBy
	}
	return FindLocalBranchesRequest_NAME
}

type FindLocalBranchesResponse struct {
	Branches             []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FindLocalBranchesResponse) Reset()         { *m = FindLocalBranchesResponse{} }
func (m *FindLocalBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*FindLocalBranchesResponse) ProtoMessage()    {}
func (*FindLocalBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{13}
}

func (m *FindLocalBranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindLocalBranchesResponse.Unmarshal(m, b)
}
func (m *FindLocalBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindLocalBranchesResponse.Marshal(b, m, deterministic)
}
func (m *FindLocalBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindLocalBranchesResponse.Merge(m, src)
}
func (m *FindLocalBranchesResponse) XXX_Size() int {
	return xxx_messageInfo_FindLocalBranchesResponse.Size(m)
}
func (m *FindLocalBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindLocalBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindLocalBranchesResponse proto.InternalMessageInfo

func (m *FindLocalBranchesResponse) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

type FindAllBranchesRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllBranchesRequest) Reset()         { *m = FindAllBranchesRequest{} }
func (m *FindAllBranchesRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchesRequest) ProtoMessage()    {}
func (*FindAllBranchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{14}
}

func (m *FindAllBranchesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchesRequest.Unmarshal(m, b)
}
func (m *FindAllBranchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchesRequest.Marshal(b, m, deterministic)
}
func (m *FindAllBranchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchesRequest.Merge(m, src)
}
func (m *FindAllBranchesRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchesRequest.Size(m)
}
func (m *FindAllBranchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchesRequest proto.InternalMessageInfo

func (m *FindAllBranchesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllBranchesResponse struct {
	Branches             []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FindAllBranchesResponse) Reset()         { *m = FindAllBranchesResponse{} }
func (m *FindAllBranchesResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllBranchesResponse) ProtoMessage()    {}
func (*FindAllBranchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{15}
}

func (m *FindAllBranchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllBranchesResponse.Unmarshal(m, b)
}
func (m *FindAllBranchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllBranchesResponse.Marshal(b, m, deterministic)
}
func (m *FindAllBranchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllBranchesResponse.Merge(m, src)
}
func (m *FindAllBranchesResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllBranchesResponse.Size(m)
}
func (m *FindAllBranchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllBranchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllBranchesResponse proto.InternalMessageInfo

func (m *FindAllBranchesResponse) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

type FindAllTagsRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindAllTagsRequest) Reset()         { *m = FindAllTagsRequest{} }
func (m *FindAllTagsRequest) String() string { return proto.CompactTextString(m) }
func (*FindAllTagsRequest) ProtoMessage()    {}
func (*FindAllTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{16}
}

func (m *FindAllTagsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagsRequest.Unmarshal(m, b)
}
func (m *FindAllTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagsRequest.Marshal(b, m, deterministic)
}
func (m *FindAllTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagsRequest.Merge(m, src)
}
func (m *FindAllTagsRequest) XXX_Size() int {
	return xxx_messageInfo_FindAllTagsRequest.Size(m)
}
func (m *FindAllTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagsRequest proto.InternalMessageInfo

func (m *FindAllTagsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

type FindAllTagsResponse struct {
	Tags                 []*Tag   `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAllTagsResponse) Reset()         { *m = FindAllTagsResponse{} }
func (m *FindAllTagsResponse) String() string { return proto.CompactTextString(m) }
func (*FindAllTagsResponse) ProtoMessage()    {}
func (*FindAllTagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{17}
}

func (m *FindAllTagsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAllTagsResponse.Unmarshal(m, b)
}
func (m *FindAllTagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAllTagsResponse.Marshal(b, m, deterministic)
}
func (m *FindAllTagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAllTagsResponse.Merge(m, src)
}
func (m *FindAllTagsResponse) XXX_Size() int {
	return xxx_messageInfo_FindAllTagsResponse.Size(m)
}
func (m *FindAllTagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAllTagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAllTagsResponse proto.InternalMessageInfo

func (m *FindAllTagsResponse) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type FindTagRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	TagName              []byte      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FindTagRequest) Reset()         { *m = FindTagRequest{} }
func (m *FindTagRequest) String() string { return proto.CompactTextString(m) }
func (*FindTagRequest) ProtoMessage()    {}
func (*FindTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{18}
}

func (m *FindTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTagRequest.Unmarshal(m, b)
}
func (m *FindTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTagRequest.Marshal(b, m, deterministic)
}
func (m *FindTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTagRequest.Merge(m, src)
}
func (m *FindTagRequest) XXX_Size() int {
	return xxx_messageInfo_FindTagRequest.Size(m)
}
func (m *FindTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindTagRequest proto.InternalMessageInfo

func (m *FindTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *FindTagRequest) GetTagName() []byte {
	if m != nil {
		return m.TagName
	}
	return nil
}

type FindTagResponse struct {
	Tag                  *Tag     `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindTagResponse) Reset()         { *m = FindTagResponse{} }
func (m *FindTagResponse) String() string { return proto.CompactTextString(m) }
func (*FindTagResponse) ProtoMessage()    {}
func (*FindTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{19}
}

func (m *FindTagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTagResponse.Unmarshal(m, b)
}
func (m *FindTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTagResponse.Marshal(b, m, deterministic)
}
func (m *FindTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTagResponse.Merge(m, src)
}
func (m *FindTagResponse) XXX_Size() int {
	return xxx_messageInfo_FindTagResponse.Size(m)
}
func (m *FindTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindTagResponse proto.InternalMessageInfo

func (m *FindTagResponse) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type RefExistsRequest struct {
	Repository *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// Any ref, e.g. 'refs/heads/master' or 'refs/tags/v1.0.1'. Must start with 'refs/'.
	Ref                  []byte   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefExistsRequest) Reset()         { *m = RefExistsRequest{} }
func (m *RefExistsRequest) String() string { return proto.CompactTextString(m) }
func (*RefExistsRequest) ProtoMessage()    {}
func (*RefExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{20}
}

func (m *RefExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefExistsRequest.Unmarshal(m, b)
}
func (m *RefExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefExistsRequest.Marshal(b, m, deterministic)
}
func (m *RefExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefExistsRequest.Merge(m, src)
}
func (m *RefExistsRequest) XXX_Size() int {
	return xxx_messageInfo_RefExistsRequest.Size(m)
}
func (m *RefExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefExistsRequest proto.InternalMessageInfo

func (m *RefExistsRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RefExistsRequest) GetRef() []byte {
	if m != nil {
		return m.Ref
	}
	return nil
}

type RefExistsResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefExistsResponse) Reset()         { *m = RefExistsResponse{} }
func (m *RefExistsResponse) String() string { return proto.CompactTextString(m) }
func (*RefExistsResponse) ProtoMessage()    {}
func (*RefExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{21}
}

func (m *RefExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefExistsResponse.Unmarshal(m, b)
}
func (m *RefExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefExistsResponse.Marshal(b, m, deterministic)
}
func (m *RefExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefExistsResponse.Merge(m, src)
}
func (m *RefExistsResponse) XXX_Size() int {
	return xxx_messageInfo_RefExistsResponse.Size(m)
}
func (m *RefExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefExistsResponse proto.InternalMessageInfo

func (m *RefExistsResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type CreateBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	BranchName           string      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitSha            string      `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	GlId                 string      `protobuf:"bytes,4,opt,name=gl_id,json=glId,proto3" json:"gl_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateBranchRequest) Reset()         { *m = CreateBranchRequest{} }
func (m *CreateBranchRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBranchRequest) ProtoMessage()    {}
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{22}
}

func (m *CreateBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBranchRequest.Unmarshal(m, b)
}
func (m *CreateBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBranchRequest.Marshal(b, m, deterministic)
}
func (m *CreateBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchRequest.Merge(m, src)
}
func (m *CreateBranchRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBranchRequest.Size(m)
}
func (m *CreateBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchRequest proto.InternalMessageInfo

func (m *CreateBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateBranchRequest) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *CreateBranchRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *CreateBranchRequest) GetGlId() string {
	if m != nil {
		return m.GlId
	}
	return ""
}

type CreateBranchResponse struct {
	Branch               *Branch  `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBranchResponse) Reset()         { *m = CreateBranchResponse{} }
func (m *CreateBranchResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBranchResponse) ProtoMessage()    {}
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{23}
}

func (m *CreateBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBranchResponse.Unmarshal(m, b)
}
func (m *CreateBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBranchResponse.Marshal(b, m, deterministic)
}
func (m *CreateBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBranchResponse.Merge(m, src)
}
func (m *CreateBranchResponse) XXX_Size() int {
	return xxx_messageInfo_CreateBranchResponse.Size(m)
}
func (m *CreateBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBranchResponse proto.InternalMessageInfo

func (m *CreateBranchResponse) GetBranch() *Branch {
	if m != nil {
		return m.Branch
	}
	return nil
}

type CreateTagRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	TagName              string      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	CommitSha            string      `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	Message              string      `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	User                 *User       `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateTagRequest) Reset()         { *m = CreateTagRequest{} }
func (m *CreateTagRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTagRequest) ProtoMessage()    {}
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{24}
}

func (m *CreateTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTagRequest.Unmarshal(m, b)
}
func (m *CreateTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTagRequest.Marshal(b, m, deterministic)
}
func (m *CreateTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTagRequest.Merge(m, src)
}
func (m *CreateTagRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTagRequest.Size(m)
}
func (m *CreateTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTagRequest proto.InternalMessageInfo

func (m *CreateTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CreateTagRequest) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

func (m *CreateTagRequest) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func (m *CreateTagRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CreateTagRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type CreateTagResponse struct {
	Tag                  *Tag     `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTagResponse) Reset()         { *m = CreateTagResponse{} }
func (m *CreateTagResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTagResponse) ProtoMessage()    {}
func (*CreateTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{25}
}

func (m *CreateTagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTagResponse.Unmarshal(m, b)
}
func (m *CreateTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTagResponse.Marshal(b, m, deterministic)
}
func (m *CreateTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTagResponse.Merge(m, src)
}
func (m *CreateTagResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTagResponse.Size(m)
}
func (m *CreateTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTagResponse proto.InternalMessageInfo

func (m *CreateTagResponse) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type RemoveBranchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	BranchName           string      `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	GlId                 string      `protobuf:"bytes,4,opt,name=gl_id,json=glId,proto3" json:"gl_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RemoveBranchRequest) Reset()         { *m = RemoveBranchRequest{} }
func (m *RemoveBranchRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveBranchRequest) ProtoMessage()    {}
func (*RemoveBranchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{26}
}

func (m *RemoveBranchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveBranchRequest.Unmarshal(m, b)
}
func (m *RemoveBranchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveBranchRequest.Marshal(b, m, deterministic)
}
func (m *RemoveBranchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBranchRequest.Merge(m, src)
}
func (m *RemoveBranchRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveBranchRequest.Size(m)
}
func (m *RemoveBranchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBranchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBranchRequest proto.InternalMessageInfo

func (m *RemoveBranchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RemoveBranchRequest) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *RemoveBranchRequest) GetGlId() string {
	if m != nil {
		return m.GlId
	}
	return ""
}

type RemoveBranchResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveBranchResponse) Reset()         { *m = RemoveBranchResponse{} }
func (m *RemoveBranchResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveBranchResponse) ProtoMessage()    {}
func (*RemoveBranchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{27}
}

func (m *RemoveBranchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveBranchResponse.Unmarshal(m, b)
}
func (m *RemoveBranchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveBranchResponse.Marshal(b, m, deterministic)
}
func (m *RemoveBranchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBranchResponse.Merge(m, src)
}
func (m *RemoveBranchResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveBranchResponse.Size(m)
}
func (m *RemoveBranchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBranchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBranchResponse proto.InternalMessageInfo

func (m *RemoveBranchResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type RemoveTagRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	TagName              string      `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	GlId                 string      `protobuf:"bytes,3,opt,name=gl_id,json=glId,proto3" json:"gl_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RemoveTagRequest) Reset()         { *m = RemoveTagRequest{} }
func (m *RemoveTagRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveTagRequest) ProtoMessage()    {}
func (*RemoveTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{28}
}

func (m *RemoveTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveTagRequest.Unmarshal(m, b)
}
func (m *RemoveTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveTagRequest.Marshal(b, m, deterministic)
}
func (m *RemoveTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTagRequest.Merge(m, src)
}
func (m *RemoveTagRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveTagRequest.Size(m)
}
func (m *RemoveTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTagRequest proto.InternalMessageInfo

func (m *RemoveTagRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RemoveTagRequest) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

func (m *RemoveTagRequest) GetGlId() string {
	if m != nil {
		return m.GlId
	}
	return ""
}

type RemoveTagResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveTagResponse) Reset()         { *m = RemoveTagResponse{} }
func (m *RemoveTagResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveTagResponse) ProtoMessage()    {}
func (*RemoveTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{29}
}

func (m *RemoveTagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveTagResponse.Unmarshal(m, b)
}
func (m *RemoveTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveTagResponse.Marshal(b, m, deterministic)
}
func (m *RemoveTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTagResponse.Merge(m, src)
}
func (m *RemoveTagResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveTagResponse.Size(m)
}
func (m *RemoveTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTagResponse proto.InternalMessageInfo

func (m *RemoveTagResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type UpdateHeadRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch               string      `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateHeadRequest) Reset()         { *m = UpdateHeadRequest{} }
func (m *UpdateHeadRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateHeadRequest) ProtoMessage()    {}
func (*UpdateHeadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{30}
}

func (m *UpdateHeadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateHeadRequest.Unmarshal(m, b)
}
func (m *UpdateHeadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateHeadRequest.Marshal(b, m, deterministic)
}
func (m *UpdateHeadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHeadRequest.Merge(m, src)
}
func (m *UpdateHeadRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateHeadRequest.Size(m)
}
func (m *UpdateHeadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHeadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHeadRequest proto.InternalMessageInfo

func (m *UpdateHeadRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *UpdateHeadRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type UpdateHeadResponse struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateHeadResponse) Reset()         { *m = UpdateHeadResponse{} }
func (m *UpdateHeadResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateHeadResponse) ProtoMessage()    {}
func (*UpdateHeadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{31}
}

func (m *UpdateHeadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateHeadResponse.Unmarshal(m, b)
}
func (m *UpdateHeadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateHeadResponse.Marshal(b, m, deterministic)
}
func (m *UpdateHeadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHeadResponse.Merge(m, src)
}
func (m *UpdateHeadResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateHeadResponse.Size(m)
}
func (m *UpdateHeadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHeadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHeadResponse proto.InternalMessageInfo

func (m *UpdateHeadResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type RefsAheadBehindRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LocalBranch          string      `protobuf:"bytes,2,opt,name=localBranch,proto3" json:"localBranch,omitempty"`
	UpstreamBranch       string      `protobuf:"bytes,3,opt,name=upstreamBranch,proto3" json:"upstreamBranch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RefsAheadBehindRequest) Reset()         { *m = RefsAheadBehindRequest{} }
func (m *RefsAheadBehindRequest) String() string { return proto.CompactTextString(m) }
func (*RefsAheadBehindRequest) ProtoMessage()    {}
func (*RefsAheadBehindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{32}
}

func (m *RefsAheadBehindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefsAheadBehindRequest.Unmarshal(m, b)
}
func (m *RefsAheadBehindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefsAheadBehindRequest.Marshal(b, m, deterministic)
}
func (m *RefsAheadBehindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefsAheadBehindRequest.Merge(m, src)
}
func (m *RefsAheadBehindRequest) XXX_Size() int {
	return xxx_messageInfo_RefsAheadBehindRequest.Size(m)
}
func (m *RefsAheadBehindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefsAheadBehindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefsAheadBehindRequest proto.InternalMessageInfo

func (m *RefsAheadBehindRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RefsAheadBehindRequest) GetLocalBranch() string {
	if m != nil {
		return m.LocalBranch
	}
	return ""
}

func (m *RefsAheadBehindRequest) GetUpstreamBranch() string {
	if m != nil {
		return m.UpstreamBranch
	}
	return ""
}

type RefsAheadBehindResponse struct {
	Ahead                int32    `protobuf:"varint,1,opt,name=ahead,proto3" json:"ahead,omitempty"`
	Behind               int32    `protobuf:"varint,2,opt,name=behind,proto3" json:"behind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefsAheadBehindResponse) Reset()         { *m = RefsAheadBehindResponse{} }
func (m *RefsAheadBehindResponse) String() string { return proto.CompactTextString(m) }
func (*RefsAheadBehindResponse) ProtoMessage()    {}
func (*RefsAheadBehindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d958559ea81b29, []int{33}
}

func (m *RefsAheadBehindResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefsAheadBehindResponse.Unmarshal(m, b)
}
func (m *RefsAheadBehindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefsAheadBehindResponse.Marshal(b, m, deterministic)
}
func (m *RefsAheadBehindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefsAheadBehindResponse.Merge(m, src)
}
func (m *RefsAheadBehindResponse) XXX_Size() int {
	return xxx_messageInfo_RefsAheadBehindResponse.Size(m)
}
func (m *RefsAheadBehindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefsAheadBehindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefsAheadBehindResponse proto.InternalMessageInfo

func (m *RefsAheadBehindResponse) GetAhead() int32 {
	if m != nil {
		return m.Ahead
	}
	return 0
}

func (m *RefsAheadBehindResponse) GetBehind() int32 {
	if m != nil {
		return m.Behind
	}
	return 0
}

func init() {
	proto.RegisterEnum("gitaly.FindLocalBranchesRequest_SortBy", FindLocalBranchesRequest_SortBy_name, FindLocalBranchesRequest_SortBy_value)
	proto.RegisterType((*RefsNameContainsCommitRequest)(nil), "gitaly.RefsNameContainsCommitRequest")
	proto.RegisterType((*RefsNameContainsCommitResponse)(nil), "gitaly.RefsNameContainsCommitResponse")
	proto.RegisterType((*FindDefaultBranchNameRequest)(nil), "gitaly.FindDefaultBranchNameRequest")
	proto.RegisterType((*FindDefaultBranchNameResponse)(nil), "gitaly.FindDefaultBranchNameResponse")
	proto.RegisterType((*FindAllBranchNamesRequest)(nil), "gitaly.FindAllBranchNamesRequest")
	proto.RegisterType((*FindAllBranchNamesResponse)(nil), "gitaly.FindAllBranchNamesResponse")
	proto.RegisterType((*FindAllTagNamesRequest)(nil), "gitaly.FindAllTagNamesRequest")
	proto.RegisterType((*FindAllTagNamesResponse)(nil), "gitaly.FindAllTagNamesResponse")
	proto.RegisterType((*FindRefNameRequest)(nil), "gitaly.FindRefNameRequest")
	proto.RegisterType((*FindRefNameResponse)(nil), "gitaly.FindRefNameResponse")
	proto.RegisterType((*FindPointAtRefNamesRequest)(nil), "gitaly.FindPointAtRefNamesRequest")
	proto.RegisterType((*FindPointAtRefNamesResponse)(nil), "gitaly.FindPointAtRefNamesResponse")
	proto.RegisterType((*FindLocalBranchesRequest)(nil), "gitaly.FindLocalBranchesRequest")
	proto.RegisterType((*FindLocalBranchesResponse)(nil), "gitaly.FindLocalBranchesResponse")
	proto.RegisterType((*FindAllBranchesRequest)(nil), "gitaly.FindAllBranchesRequest")
	proto.RegisterType((*FindAllBranchesResponse)(nil), "gitaly.FindAllBranchesResponse")
	proto.RegisterType((*FindAllTagsRequest)(nil), "gitaly.FindAllTagsRequest")
	proto.RegisterType((*FindAllTagsResponse)(nil), "gitaly.FindAllTagsResponse")
	proto.RegisterType((*FindTagRequest)(nil), "gitaly.FindTagRequest")
	proto.RegisterType((*FindTagResponse)(nil), "gitaly.FindTagResponse")
	proto.RegisterType((*RefExistsRequest)(nil), "gitaly.RefExistsRequest")
	proto.RegisterType((*RefExistsResponse)(nil), "gitaly.RefExistsResponse")
	proto.RegisterType((*CreateBranchRequest)(nil), "gitaly.CreateBranchRequest")
	proto.RegisterType((*CreateBranchResponse)(nil), "gitaly.CreateBranchResponse")
	proto.RegisterType((*CreateTagRequest)(nil), "gitaly.CreateTagRequest")
	proto.RegisterType((*CreateTagResponse)(nil), "gitaly.CreateTagResponse")
	proto.RegisterType((*RemoveBranchRequest)(nil), "gitaly.RemoveBranchRequest")
	proto.RegisterType((*RemoveBranchResponse)(nil), "gitaly.RemoveBranchResponse")
	proto.RegisterType((*RemoveTagRequest)(nil), "gitaly.RemoveTagRequest")
	proto.RegisterType((*RemoveTagResponse)(nil), "gitaly.RemoveTagResponse")
	proto.RegisterType((*UpdateHeadRequest)(nil), "gitaly.UpdateHeadRequest")
	proto.RegisterType((*UpdateHeadResponse)(nil), "gitaly.UpdateHeadResponse")
	proto.RegisterType((*RefsAheadBehindRequest)(nil), "gitaly.RefsAheadBehindRequest")
	proto.RegisterType((*RefsAheadBehindResponse)(nil), "gitaly.RefsAheadBehindResponse")
}

func init() { proto.RegisterFile("ref.proto", fileDescriptor_65d958559ea81b29) }

var fileDescriptor_65d958559ea81b29 = []byte{
	// 1149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0x1a, 0x47,
	0x14, 0xf7, 0xda, 0x18, 0xc3, 0x03, 0x39, 0x78, 0xec, 0x62, 0xbc, 0x8e, 0x6d, 0x32, 0x6d, 0x5c,
	0x27, 0xaa, 0x68, 0x84, 0xd5, 0x9e, 0xda, 0xaa, 0xd8, 0xa6, 0x71, 0x9a, 0x34, 0x8d, 0xc6, 0x76,
	0x95, 0x43, 0x25, 0x34, 0xc0, 0x2c, 0xac, 0x04, 0x2c, 0xdd, 0x59, 0xac, 0xf8, 0x50, 0xf5, 0xd4,
	0x4f, 0x50, 0xa9, 0xc7, 0x7e, 0x92, 0xde, 0xfb, 0xb5, 0xaa, 0x9d, 0x19, 0x66, 0x67, 0x61, 0xc1,
	0x52, 0x37, 0xcd, 0xc9, 0x9e, 0x79, 0x7f, 0xe6, 0xf7, 0xfe, 0xbf, 0x05, 0xf2, 0x3e, 0x73, 0x6a,
	0x63, 0xdf, 0x0b, 0x3c, 0x94, 0xed, 0xb9, 0x01, 0x1d, 0xdc, 0xd9, 0x45, 0xde, 0xa7, 0x3e, 0xeb,
	0xca, 0x5b, 0x3c, 0x86, 0x03, 0xc2, 0x1c, 0xfe, 0x9a, 0x0e, 0xd9, 0xb9, 0x37, 0x0a, 0xa8, 0x3b,
	0xe2, 0xe7, 0xde, 0x70, 0xe8, 0x06, 0x84, 0xfd, 0x32, 0x61, 0x3c, 0x40, 0x75, 0x00, 0x9f, 0x8d,
	0x3d, 0xee, 0x06, 0x9e, 0x7f, 0x57, 0xb1, 0xaa, 0xd6, 0x49, 0xa1, 0x8e, 0x6a, 0x52, 0x57, 0x8d,
	0x68, 0x0a, 0x31, 0xb8, 0xd0, 0x3e, 0xe4, 0x3b, 0x42, 0x49, 0xcb, 0xed, 0x56, 0x56, 0xab, 0xd6,
	0x49, 0x9e, 0xe4, 0xe4, 0xc5, 0x8b, 0x2e, 0xfe, 0x1a, 0x0e, 0x17, 0xbd, 0xc8, 0xc7, 0xde, 0x88,
	0xb3, 0x50, 0xdc, 0x67, 0x0e, 0x6f, 0x8d, 0xe8, 0x90, 0x55, 0xac, 0xea, 0xda, 0x49, 0x91, 0xe4,
	0x7c, 0x25, 0x82, 0x09, 0x3c, 0xfc, 0xce, 0x1d, 0x75, 0x2f, 0x98, 0x43, 0x27, 0x83, 0xe0, 0xcc,
	0xa7, 0xa3, 0x4e, 0x3f, 0x24, 0xa4, 0xc0, 0x8b, 0x4f, 0xe1, 0x60, 0x81, 0x4e, 0x85, 0x08, 0x41,
	0x46, 0x81, 0xb1, 0x4e, 0x8a, 0x44, 0xfc, 0x8f, 0x7f, 0x84, 0xbd, 0x50, 0xa8, 0x31, 0x18, 0x44,
	0x02, 0x3c, 0x0d, 0x8a, 0x3a, 0xd8, 0x49, 0x0a, 0x15, 0x84, 0x1d, 0x58, 0x0f, 0x9f, 0xe5, 0xca,
	0x21, 0xf2, 0x80, 0x5f, 0x41, 0x59, 0xc9, 0x5c, 0xd3, 0x5e, 0x6a, 0x04, 0x9f, 0xc3, 0xee, 0x9c,
	0xb6, 0xa5, 0xcf, 0xff, 0x0a, 0x28, 0x14, 0x20, 0xcc, 0x49, 0x19, 0x82, 0xa5, 0x29, 0x83, 0xca,
	0x90, 0x1d, 0xfb, 0xcc, 0x71, 0xdf, 0x55, 0xd6, 0x44, 0x00, 0xd4, 0x09, 0x3f, 0x81, 0xed, 0xd8,
	0xf3, 0x4b, 0xa2, 0xf5, 0xbb, 0x25, 0xbd, 0xfb, 0xc6, 0x73, 0x47, 0x41, 0x23, 0x50, 0x22, 0xfc,
	0x83, 0x43, 0x3e, 0x85, 0xfd, 0x44, 0x18, 0x4b, 0xdd, 0xfc, 0x8f, 0x05, 0x95, 0x50, 0xea, 0x95,
	0xd7, 0xa1, 0x2a, 0x39, 0xd2, 0x41, 0xff, 0x16, 0x36, 0xb8, 0xe7, 0x07, 0xad, 0xf6, 0x9d, 0x00,
	0xbe, 0x59, 0xff, 0x74, 0x2a, 0xb0, 0xe8, 0x99, 0xda, 0x95, 0xe7, 0x07, 0x67, 0x77, 0x24, 0xcb,
	0xc5, 0x5f, 0xfc, 0x05, 0x64, 0xe5, 0x0d, 0xca, 0x41, 0xe6, 0x75, 0xe3, 0x87, 0x66, 0x69, 0x05,
	0x3d, 0x80, 0xc2, 0xcd, 0x9b, 0x8b, 0xc6, 0x75, 0xf3, 0xa2, 0xd5, 0xb8, 0x3a, 0x2f, 0x59, 0xa8,
	0x04, 0xc5, 0xe9, 0xc5, 0x45, 0xf3, 0xea, 0xbc, 0xb4, 0x8a, 0x9f, 0xcb, 0xa2, 0x99, 0x79, 0x41,
	0x19, 0xff, 0x14, 0x72, 0x6d, 0x75, 0x27, 0xec, 0x2f, 0xd4, 0x37, 0xa7, 0xb0, 0x24, 0x2f, 0xd1,
	0x74, 0x23, 0xf1, 0xdf, 0x83, 0x3f, 0x70, 0x53, 0x27, 0x7e, 0x2a, 0x50, 0x97, 0xb2, 0x1c, 0x64,
	0xfd, 0xa4, 0x02, 0xf4, 0xa5, 0xcc, 0x6c, 0xad, 0x49, 0x81, 0x39, 0x82, 0x4c, 0x40, 0x7b, 0x53,
	0x20, 0x85, 0xa9, 0x92, 0x6b, 0xda, 0x23, 0x82, 0x80, 0x5b, 0xb0, 0x19, 0xca, 0x85, 0x17, 0x29,
	0xd2, 0x63, 0x0f, 0x72, 0x01, 0xed, 0xc9, 0xfe, 0xbb, 0x2a, 0xd2, 0x77, 0x23, 0x90, 0x0d, 0x01,
	0x3f, 0x83, 0x07, 0xfa, 0x01, 0x05, 0xea, 0x00, 0xd6, 0x02, 0xda, 0x53, 0xaa, 0x63, 0x98, 0xc2,
	0x7b, 0xfc, 0x16, 0x4a, 0x84, 0x39, 0xcd, 0x77, 0x2e, 0x0f, 0x52, 0xe5, 0x6c, 0x09, 0xd6, 0x7c,
	0xe6, 0x28, 0x3c, 0xe1, 0xbf, 0xf8, 0x09, 0x6c, 0x19, 0x9a, 0xa3, 0x0a, 0xba, 0xa5, 0x83, 0x89,
	0xac, 0xfe, 0x1c, 0x91, 0x07, 0xfc, 0x97, 0x05, 0xdb, 0xe7, 0x3e, 0xa3, 0x01, 0x53, 0x41, 0x4b,
	0x01, 0xe4, 0x08, 0x0a, 0x32, 0xe2, 0x91, 0x83, 0xf2, 0x04, 0xda, 0xba, 0x67, 0xa3, 0x03, 0x00,
	0xd5, 0x18, 0x78, 0x9f, 0x8a, 0xfa, 0xcf, 0x13, 0xd5, 0x2a, 0xae, 0xfa, 0x14, 0x6d, 0xc3, 0x7a,
	0x6f, 0x10, 0xf6, 0x8c, 0x8c, 0xa0, 0x64, 0x7a, 0x83, 0x17, 0x5d, 0xfc, 0x0d, 0xec, 0xc4, 0xf1,
	0x29, 0x73, 0x8e, 0x21, 0x2b, 0x35, 0x8b, 0x77, 0xe6, 0x93, 0x4f, 0x51, 0xf1, 0xdf, 0x16, 0x94,
	0xa4, 0x82, 0xf7, 0x1c, 0xfb, 0xbc, 0x8e, 0xfd, 0x7d, 0x76, 0x55, 0x60, 0x63, 0xc8, 0x38, 0xa7,
	0x3d, 0xa6, 0x2c, 0x9b, 0x1e, 0x51, 0x15, 0x32, 0x13, 0xce, 0xfc, 0xca, 0xba, 0x40, 0x50, 0x9c,
	0x22, 0xb8, 0xe1, 0xcc, 0x27, 0x82, 0x82, 0xeb, 0xb0, 0x65, 0xa0, 0x8f, 0x27, 0xd6, 0xea, 0x82,
	0xc4, 0xfa, 0x0d, 0xb6, 0x09, 0x1b, 0x7a, 0xb7, 0x1f, 0x22, 0xa4, 0x89, 0x31, 0xfb, 0x0c, 0x76,
	0xe2, 0x00, 0x96, 0xa6, 0xe0, 0x6d, 0x58, 0x07, 0x21, 0xf7, 0xff, 0x17, 0x20, 0x8d, 0x72, 0xcd,
	0x40, 0x29, 0xaa, 0x44, 0xbf, 0xbb, 0x14, 0x62, 0x0b, 0xb6, 0x6e, 0xc6, 0x5d, 0x1a, 0xb0, 0x4b,
	0x46, 0xbb, 0x69, 0x30, 0x96, 0x63, 0x59, 0x9b, 0xd7, 0x59, 0xfa, 0x14, 0x90, 0xf9, 0xc0, 0x52,
	0x30, 0x7f, 0x5a, 0x50, 0x0e, 0x17, 0xc5, 0x46, 0x9f, 0xd1, 0xee, 0x19, 0xeb, 0x8b, 0x41, 0xff,
	0xdf, 0x21, 0x55, 0xa1, 0x30, 0x88, 0xa6, 0x8e, 0xc2, 0x65, 0x5e, 0xa1, 0x63, 0xd8, 0x9c, 0x8c,
	0x79, 0xe0, 0x33, 0x3a, 0x54, 0x4c, 0xd2, 0x8d, 0x33, 0xb7, 0xf8, 0x39, 0xec, 0xce, 0xe1, 0x8a,
	0x2c, 0xa1, 0xe1, 0xb5, 0xc0, 0xb4, 0x4e, 0xe4, 0x41, 0x78, 0x43, 0xf0, 0x89, 0x57, 0xd7, 0x89,
	0x3a, 0xd5, 0xff, 0x28, 0x00, 0x10, 0xe6, 0x5c, 0x31, 0xff, 0xd6, 0xed, 0x30, 0xe4, 0xc0, 0x47,
	0x89, 0x5b, 0x28, 0xfa, 0xc4, 0x1c, 0xce, 0x8b, 0x16, 0x5f, 0xfb, 0xf1, 0x3d, 0x5c, 0x12, 0x22,
	0x5e, 0x41, 0x2d, 0x3d, 0xa5, 0x8c, 0x3d, 0x13, 0x3d, 0x32, 0xc5, 0x13, 0x97, 0x5a, 0x1b, 0x2f,
	0x63, 0x99, 0xaa, 0x7f, 0x66, 0xa1, 0x9f, 0xe4, 0x8c, 0x30, 0xd6, 0x48, 0x74, 0x38, 0x23, 0x3a,
	0xb3, 0xad, 0xda, 0x47, 0x0b, 0xe9, 0x86, 0xde, 0x4b, 0x28, 0x18, 0xeb, 0x1e, 0xb2, 0x4d, 0x99,
	0xf8, 0x0a, 0x6a, 0xef, 0x27, 0xd2, 0xb4, 0x0b, 0x7e, 0x86, 0xad, 0xb9, 0x35, 0x04, 0x55, 0xef,
	0xdb, 0x81, 0xec, 0x47, 0x4b, 0x38, 0x12, 0xed, 0xd7, 0xba, 0x0f, 0x13, 0x5d, 0xb7, 0xd8, 0xfe,
	0x44, 0xbd, 0xdf, 0x4b, 0xfb, 0xd5, 0x52, 0x10, 0xb7, 0x3f, 0xbe, 0x73, 0xc4, 0xed, 0x9f, 0xd9,
	0x22, 0x84, 0xae, 0xaf, 0x60, 0x43, 0xcd, 0x71, 0x54, 0x36, 0x79, 0xa3, 0xe6, 0x64, 0xef, 0xce,
	0xdd, 0x6b, 0xff, 0x9d, 0x41, 0x5e, 0x4f, 0x5e, 0x54, 0x89, 0x2a, 0x2f, 0x3e, 0xe6, 0xed, 0xbd,
	0x04, 0x8a, 0xd6, 0xd1, 0x96, 0x2b, 0xce, 0xcc, 0x26, 0x8c, 0x62, 0x49, 0x96, 0xbc, 0xad, 0xdb,
	0x1f, 0x2f, 0xe5, 0x31, 0xac, 0x7c, 0x09, 0x45, 0x73, 0xaa, 0x22, 0xed, 0x96, 0x84, 0x5d, 0xc0,
	0x7e, 0x98, 0x4c, 0xd4, 0x80, 0x5f, 0x42, 0xd1, 0x6c, 0xf7, 0x91, 0xb2, 0x84, 0x29, 0x14, 0x29,
	0x4b, 0x9a, 0x10, 0xd2, 0x83, 0x7a, 0xe0, 0x45, 0x1e, 0x9c, 0x9d, 0xe0, 0x91, 0x07, 0xe7, 0xa6,
	0xe3, 0x34, 0x0a, 0xaa, 0xb3, 0x9b, 0x51, 0x88, 0x0f, 0x19, 0x33, 0x0a, 0x33, 0x63, 0x00, 0xaf,
	0xa0, 0x26, 0x40, 0xd4, 0x91, 0x91, 0x66, 0x9d, 0x1b, 0x03, 0xb6, 0x9d, 0x44, 0xd2, 0x6a, 0x3c,
	0xf9, 0x75, 0x95, 0xfc, 0x61, 0x8f, 0x1e, 0x1b, 0x79, 0xb0, 0xf8, 0xa7, 0x06, 0xfb, 0xf8, 0x3e,
	0x36, 0x23, 0xb2, 0x6f, 0xf5, 0xa7, 0x9f, 0xd9, 0x88, 0xa3, 0x3a, 0x4b, 0x9e, 0x1c, 0x51, 0x9d,
	0x2d, 0xe8, 0xe0, 0x78, 0xe5, 0xac, 0x02, 0xe5, 0x8e, 0x37, 0xac, 0xd1, 0x81, 0xdb, 0xa6, 0x6d,
	0x5a, 0x73, 0x3c, 0xbf, 0xc3, 0x6a, 0x3d, 0x7f, 0xdc, 0x69, 0x67, 0xc5, 0x4f, 0x26, 0xa7, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xa8, 0x78, 0x46, 0x55, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RefServiceClient is the client API for RefService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RefServiceClient interface {
	FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchNamesClient, error)
	FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (RefService_FindAllTagNamesClient, error)
	// Find a Ref matching the given constraints. Response may be empty.
	FindRefName(ctx context.Context, in *FindRefNameRequest, opts ...grpc.CallOption) (*FindRefNameResponse, error)
	// Return a stream so we can divide the response in chunks of branches
	FindLocalBranches(ctx context.Context, in *FindLocalBranchesRequest, opts ...grpc.CallOption) (RefService_FindLocalBranchesClient, error)
	FindAllBranches(ctx context.Context, in *FindAllBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchesClient, error)
	FindAllTags(ctx context.Context, in *FindAllTagsRequest, opts ...grpc.CallOption) (RefService_FindAllTagsClient, error)
	FindTag(ctx context.Context, in *FindTagRequest, opts ...grpc.CallOption) (*FindTagResponse, error)
	RefExists(ctx context.Context, in *RefExistsRequest, opts ...grpc.CallOption) (*RefExistsResponse, error)
	FindPointAtRefNames(ctx context.Context, in *FindPointAtRefNamesRequest, opts ...grpc.CallOption) (RefService_FindPointAtRefNamesClient, error)
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	RemoveBranch(ctx context.Context, in *RemoveBranchRequest, opts ...grpc.CallOption) (*RemoveBranchResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error)
	UpdateHead(ctx context.Context, in *UpdateHeadRequest, opts ...grpc.CallOption) (*UpdateHeadResponse, error)
	FindRefsNameContainsCommit(ctx context.Context, in *RefsNameContainsCommitRequest, opts ...grpc.CallOption) (RefService_FindRefsNameContainsCommitClient, error)
	// Get two branch or commit before and behind commits count
	FindRefsAheadBehind(ctx context.Context, in *RefsAheadBehindRequest, opts ...grpc.CallOption) (*RefsAheadBehindResponse, error)
}

type refServiceClient struct {
	cc *grpc.ClientConn
}

func NewRefServiceClient(cc *grpc.ClientConn) RefServiceClient {
	return &refServiceClient{cc}
}

func (c *refServiceClient) FindDefaultBranchName(ctx context.Context, in *FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*FindDefaultBranchNameResponse, error) {
	out := new(FindDefaultBranchNameResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindDefaultBranchName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindAllBranchNames(ctx context.Context, in *FindAllBranchNamesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[0], "/gitaly.RefService/FindAllBranchNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllBranchNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllBranchNamesClient interface {
	Recv() (*FindAllBranchNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllBranchNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllBranchNamesClient) Recv() (*FindAllBranchNamesResponse, error) {
	m := new(FindAllBranchNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllTagNames(ctx context.Context, in *FindAllTagNamesRequest, opts ...grpc.CallOption) (RefService_FindAllTagNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[1], "/gitaly.RefService/FindAllTagNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllTagNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllTagNamesClient interface {
	Recv() (*FindAllTagNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllTagNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllTagNamesClient) Recv() (*FindAllTagNamesResponse, error) {
	m := new(FindAllTagNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindRefName(ctx context.Context, in *FindRefNameRequest, opts ...grpc.CallOption) (*FindRefNameResponse, error) {
	out := new(FindRefNameResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindRefName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindLocalBranches(ctx context.Context, in *FindLocalBranchesRequest, opts ...grpc.CallOption) (RefService_FindLocalBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[2], "/gitaly.RefService/FindLocalBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindLocalBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindLocalBranchesClient interface {
	Recv() (*FindLocalBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindLocalBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindLocalBranchesClient) Recv() (*FindLocalBranchesResponse, error) {
	m := new(FindLocalBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllBranches(ctx context.Context, in *FindAllBranchesRequest, opts ...grpc.CallOption) (RefService_FindAllBranchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[3], "/gitaly.RefService/FindAllBranches", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllBranchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllBranchesClient interface {
	Recv() (*FindAllBranchesResponse, error)
	grpc.ClientStream
}

type refServiceFindAllBranchesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllBranchesClient) Recv() (*FindAllBranchesResponse, error) {
	m := new(FindAllBranchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindAllTags(ctx context.Context, in *FindAllTagsRequest, opts ...grpc.CallOption) (RefService_FindAllTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[4], "/gitaly.RefService/FindAllTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindAllTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindAllTagsClient interface {
	Recv() (*FindAllTagsResponse, error)
	grpc.ClientStream
}

type refServiceFindAllTagsClient struct {
	grpc.ClientStream
}

func (x *refServiceFindAllTagsClient) Recv() (*FindAllTagsResponse, error) {
	m := new(FindAllTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindTag(ctx context.Context, in *FindTagRequest, opts ...grpc.CallOption) (*FindTagResponse, error) {
	out := new(FindTagResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) RefExists(ctx context.Context, in *RefExistsRequest, opts ...grpc.CallOption) (*RefExistsResponse, error) {
	out := new(RefExistsResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/RefExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindPointAtRefNames(ctx context.Context, in *FindPointAtRefNamesRequest, opts ...grpc.CallOption) (RefService_FindPointAtRefNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[5], "/gitaly.RefService/FindPointAtRefNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindPointAtRefNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindPointAtRefNamesClient interface {
	Recv() (*FindPointAtRefNamesResponse, error)
	grpc.ClientStream
}

type refServiceFindPointAtRefNamesClient struct {
	grpc.ClientStream
}

func (x *refServiceFindPointAtRefNamesClient) Recv() (*FindPointAtRefNamesResponse, error) {
	m := new(FindPointAtRefNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) RemoveBranch(ctx context.Context, in *RemoveBranchRequest, opts ...grpc.CallOption) (*RemoveBranchResponse, error) {
	out := new(RemoveBranchResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/RemoveBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error) {
	out := new(RemoveTagResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/RemoveTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) UpdateHead(ctx context.Context, in *UpdateHeadRequest, opts ...grpc.CallOption) (*UpdateHeadResponse, error) {
	out := new(UpdateHeadResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/UpdateHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refServiceClient) FindRefsNameContainsCommit(ctx context.Context, in *RefsNameContainsCommitRequest, opts ...grpc.CallOption) (RefService_FindRefsNameContainsCommitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RefService_serviceDesc.Streams[6], "/gitaly.RefService/FindRefsNameContainsCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &refServiceFindRefsNameContainsCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RefService_FindRefsNameContainsCommitClient interface {
	Recv() (*RefsNameContainsCommitResponse, error)
	grpc.ClientStream
}

type refServiceFindRefsNameContainsCommitClient struct {
	grpc.ClientStream
}

func (x *refServiceFindRefsNameContainsCommitClient) Recv() (*RefsNameContainsCommitResponse, error) {
	m := new(RefsNameContainsCommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *refServiceClient) FindRefsAheadBehind(ctx context.Context, in *RefsAheadBehindRequest, opts ...grpc.CallOption) (*RefsAheadBehindResponse, error) {
	out := new(RefsAheadBehindResponse)
	err := c.cc.Invoke(ctx, "/gitaly.RefService/FindRefsAheadBehind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefServiceServer is the server API for RefService service.
type RefServiceServer interface {
	FindDefaultBranchName(context.Context, *FindDefaultBranchNameRequest) (*FindDefaultBranchNameResponse, error)
	FindAllBranchNames(*FindAllBranchNamesRequest, RefService_FindAllBranchNamesServer) error
	FindAllTagNames(*FindAllTagNamesRequest, RefService_FindAllTagNamesServer) error
	// Find a Ref matching the given constraints. Response may be empty.
	FindRefName(context.Context, *FindRefNameRequest) (*FindRefNameResponse, error)
	// Return a stream so we can divide the response in chunks of branches
	FindLocalBranches(*FindLocalBranchesRequest, RefService_FindLocalBranchesServer) error
	FindAllBranches(*FindAllBranchesRequest, RefService_FindAllBranchesServer) error
	FindAllTags(*FindAllTagsRequest, RefService_FindAllTagsServer) error
	FindTag(context.Context, *FindTagRequest) (*FindTagResponse, error)
	RefExists(context.Context, *RefExistsRequest) (*RefExistsResponse, error)
	FindPointAtRefNames(*FindPointAtRefNamesRequest, RefService_FindPointAtRefNamesServer) error
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	RemoveBranch(context.Context, *RemoveBranchRequest) (*RemoveBranchResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	RemoveTag(context.Context, *RemoveTagRequest) (*RemoveTagResponse, error)
	UpdateHead(context.Context, *UpdateHeadRequest) (*UpdateHeadResponse, error)
	FindRefsNameContainsCommit(*RefsNameContainsCommitRequest, RefService_FindRefsNameContainsCommitServer) error
	// Get two branch or commit before and behind commits count
	FindRefsAheadBehind(context.Context, *RefsAheadBehindRequest) (*RefsAheadBehindResponse, error)
}

// UnimplementedRefServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRefServiceServer struct {
}

func (*UnimplementedRefServiceServer) FindDefaultBranchName(ctx context.Context, req *FindDefaultBranchNameRequest) (*FindDefaultBranchNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultBranchName not implemented")
}
func (*UnimplementedRefServiceServer) FindAllBranchNames(req *FindAllBranchNamesRequest, srv RefService_FindAllBranchNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllBranchNames not implemented")
}
func (*UnimplementedRefServiceServer) FindAllTagNames(req *FindAllTagNamesRequest, srv RefService_FindAllTagNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllTagNames not implemented")
}
func (*UnimplementedRefServiceServer) FindRefName(ctx context.Context, req *FindRefNameRequest) (*FindRefNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRefName not implemented")
}
func (*UnimplementedRefServiceServer) FindLocalBranches(req *FindLocalBranchesRequest, srv RefService_FindLocalBranchesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindLocalBranches not implemented")
}
func (*UnimplementedRefServiceServer) FindAllBranches(req *FindAllBranchesRequest, srv RefService_FindAllBranchesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllBranches not implemented")
}
func (*UnimplementedRefServiceServer) FindAllTags(req *FindAllTagsRequest, srv RefService_FindAllTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindAllTags not implemented")
}
func (*UnimplementedRefServiceServer) FindTag(ctx context.Context, req *FindTagRequest) (*FindTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTag not implemented")
}
func (*UnimplementedRefServiceServer) RefExists(ctx context.Context, req *RefExistsRequest) (*RefExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefExists not implemented")
}
func (*UnimplementedRefServiceServer) FindPointAtRefNames(req *FindPointAtRefNamesRequest, srv RefService_FindPointAtRefNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindPointAtRefNames not implemented")
}
func (*UnimplementedRefServiceServer) CreateBranch(ctx context.Context, req *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (*UnimplementedRefServiceServer) RemoveBranch(ctx context.Context, req *RemoveBranchRequest) (*RemoveBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBranch not implemented")
}
func (*UnimplementedRefServiceServer) CreateTag(ctx context.Context, req *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedRefServiceServer) RemoveTag(ctx context.Context, req *RemoveTagRequest) (*RemoveTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (*UnimplementedRefServiceServer) UpdateHead(ctx context.Context, req *UpdateHeadRequest) (*UpdateHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHead not implemented")
}
func (*UnimplementedRefServiceServer) FindRefsNameContainsCommit(req *RefsNameContainsCommitRequest, srv RefService_FindRefsNameContainsCommitServer) error {
	return status.Errorf(codes.Unimplemented, "method FindRefsNameContainsCommit not implemented")
}
func (*UnimplementedRefServiceServer) FindRefsAheadBehind(ctx context.Context, req *RefsAheadBehindRequest) (*RefsAheadBehindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRefsAheadBehind not implemented")
}

func RegisterRefServiceServer(s *grpc.Server, srv RefServiceServer) {
	s.RegisterService(&_RefService_serviceDesc, srv)
}

func _RefService_FindDefaultBranchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultBranchNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindDefaultBranchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindDefaultBranchName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindDefaultBranchName(ctx, req.(*FindDefaultBranchNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindAllBranchNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllBranchNames(m, &refServiceFindAllBranchNamesServer{stream})
}

type RefService_FindAllBranchNamesServer interface {
	Send(*FindAllBranchNamesResponse) error
	grpc.ServerStream
}

type refServiceFindAllBranchNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllBranchNamesServer) Send(m *FindAllBranchNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllTagNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllTagNames(m, &refServiceFindAllTagNamesServer{stream})
}

type RefService_FindAllTagNamesServer interface {
	Send(*FindAllTagNamesResponse) error
	grpc.ServerStream
}

type refServiceFindAllTagNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllTagNamesServer) Send(m *FindAllTagNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindRefName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRefNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindRefName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindRefName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindRefName(ctx, req.(*FindRefNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindLocalBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindLocalBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindLocalBranches(m, &refServiceFindLocalBranchesServer{stream})
}

type RefService_FindLocalBranchesServer interface {
	Send(*FindLocalBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindLocalBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindLocalBranchesServer) Send(m *FindLocalBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllBranches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllBranchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllBranches(m, &refServiceFindAllBranchesServer{stream})
}

type RefService_FindAllBranchesServer interface {
	Send(*FindAllBranchesResponse) error
	grpc.ServerStream
}

type refServiceFindAllBranchesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllBranchesServer) Send(m *FindAllBranchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindAllTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAllTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindAllTags(m, &refServiceFindAllTagsServer{stream})
}

type RefService_FindAllTagsServer interface {
	Send(*FindAllTagsResponse) error
	grpc.ServerStream
}

type refServiceFindAllTagsServer struct {
	grpc.ServerStream
}

func (x *refServiceFindAllTagsServer) Send(m *FindAllTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindTag(ctx, req.(*FindTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_RefExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).RefExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/RefExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).RefExists(ctx, req.(*RefExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindPointAtRefNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindPointAtRefNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindPointAtRefNames(m, &refServiceFindPointAtRefNamesServer{stream})
}

type RefService_FindPointAtRefNamesServer interface {
	Send(*FindPointAtRefNamesResponse) error
	grpc.ServerStream
}

type refServiceFindPointAtRefNamesServer struct {
	grpc.ServerStream
}

func (x *refServiceFindPointAtRefNamesServer) Send(m *FindPointAtRefNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_RemoveBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).RemoveBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/RemoveBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).RemoveBranch(ctx, req.(*RemoveBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/RemoveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).RemoveTag(ctx, req.(*RemoveTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_UpdateHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).UpdateHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/UpdateHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).UpdateHead(ctx, req.(*UpdateHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefService_FindRefsNameContainsCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RefsNameContainsCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RefServiceServer).FindRefsNameContainsCommit(m, &refServiceFindRefsNameContainsCommitServer{stream})
}

type RefService_FindRefsNameContainsCommitServer interface {
	Send(*RefsNameContainsCommitResponse) error
	grpc.ServerStream
}

type refServiceFindRefsNameContainsCommitServer struct {
	grpc.ServerStream
}

func (x *refServiceFindRefsNameContainsCommitServer) Send(m *RefsNameContainsCommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RefService_FindRefsAheadBehind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefsAheadBehindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefServiceServer).FindRefsAheadBehind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitaly.RefService/FindRefsAheadBehind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefServiceServer).FindRefsAheadBehind(ctx, req.(*RefsAheadBehindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RefService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitaly.RefService",
	HandlerType: (*RefServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDefaultBranchName",
			Handler:    _RefService_FindDefaultBranchName_Handler,
		},
		{
			MethodName: "FindRefName",
			Handler:    _RefService_FindRefName_Handler,
		},
		{
			MethodName: "FindTag",
			Handler:    _RefService_FindTag_Handler,
		},
		{
			MethodName: "RefExists",
			Handler:    _RefService_RefExists_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _RefService_CreateBranch_Handler,
		},
		{
			MethodName: "RemoveBranch",
			Handler:    _RefService_RemoveBranch_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _RefService_CreateTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _RefService_RemoveTag_Handler,
		},
		{
			MethodName: "UpdateHead",
			Handler:    _RefService_UpdateHead_Handler,
		},
		{
			MethodName: "FindRefsAheadBehind",
			Handler:    _RefService_FindRefsAheadBehind_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindAllBranchNames",
			Handler:       _RefService_FindAllBranchNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTagNames",
			Handler:       _RefService_FindAllTagNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindLocalBranches",
			Handler:       _RefService_FindLocalBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllBranches",
			Handler:       _RefService_FindAllBranches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAllTags",
			Handler:       _RefService_FindAllTags_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindPointAtRefNames",
			Handler:       _RefService_FindPointAtRefNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindRefsNameContainsCommit",
			Handler:       _RefService_FindRefsNameContainsCommit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ref.proto",
}
