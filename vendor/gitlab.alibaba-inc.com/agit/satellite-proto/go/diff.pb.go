// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diff.proto

package satellite

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommitDiffRequest struct {
	Repository             *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LeftCommitId           string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId,proto3" json:"left_commit_id,omitempty"`
	RightCommitId          string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId,proto3" json:"right_commit_id,omitempty"`
	IgnoreWhitespaceChange bool        `protobuf:"varint,4,opt,name=ignore_whitespace_change,json=ignoreWhitespaceChange,proto3" json:"ignore_whitespace_change,omitempty"`
	Paths                  [][]byte    `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
	CollapseDiffs          bool        `protobuf:"varint,6,opt,name=collapse_diffs,json=collapseDiffs,proto3" json:"collapse_diffs,omitempty"`
	EnforceLimits          bool        `protobuf:"varint,7,opt,name=enforce_limits,json=enforceLimits,proto3" json:"enforce_limits,omitempty"`
	MaxFiles               int32       `protobuf:"varint,8,opt,name=max_files,json=maxFiles,proto3" json:"max_files,omitempty"`
	MaxLines               int32       `protobuf:"varint,9,opt,name=max_lines,json=maxLines,proto3" json:"max_lines,omitempty"`
	MaxBytes               int32       `protobuf:"varint,10,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	SafeMaxFiles           int32       `protobuf:"varint,11,opt,name=safe_max_files,json=safeMaxFiles,proto3" json:"safe_max_files,omitempty"`
	SafeMaxLines           int32       `protobuf:"varint,12,opt,name=safe_max_lines,json=safeMaxLines,proto3" json:"safe_max_lines,omitempty"`
	SafeMaxBytes           int32       `protobuf:"varint,13,opt,name=safe_max_bytes,json=safeMaxBytes,proto3" json:"safe_max_bytes,omitempty"`
	UseMergeBase           bool        `protobuf:"varint,14,opt,name=use_merge_base,json=useMergeBase,proto3" json:"use_merge_base,omitempty"`
	ContextLine            uint32      `protobuf:"varint,15,opt,name=context_line,json=contextLine,proto3" json:"context_line,omitempty"`
	NameOnly               bool        `protobuf:"varint,16,opt,name=name_only,json=nameOnly,proto3" json:"name_only,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}    `json:"-"`
	XXX_unrecognized       []byte      `json:"-"`
	XXX_sizecache          int32       `json:"-"`
}

func (m *CommitDiffRequest) Reset()         { *m = CommitDiffRequest{} }
func (m *CommitDiffRequest) String() string { return proto.CompactTextString(m) }
func (*CommitDiffRequest) ProtoMessage()    {}
func (*CommitDiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{0}
}

func (m *CommitDiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitDiffRequest.Unmarshal(m, b)
}
func (m *CommitDiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitDiffRequest.Marshal(b, m, deterministic)
}
func (m *CommitDiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitDiffRequest.Merge(m, src)
}
func (m *CommitDiffRequest) XXX_Size() int {
	return xxx_messageInfo_CommitDiffRequest.Size(m)
}
func (m *CommitDiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitDiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitDiffRequest proto.InternalMessageInfo

func (m *CommitDiffRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CommitDiffRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *CommitDiffRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

func (m *CommitDiffRequest) GetIgnoreWhitespaceChange() bool {
	if m != nil {
		return m.IgnoreWhitespaceChange
	}
	return false
}

func (m *CommitDiffRequest) GetPaths() [][]byte {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *CommitDiffRequest) GetCollapseDiffs() bool {
	if m != nil {
		return m.CollapseDiffs
	}
	return false
}

func (m *CommitDiffRequest) GetEnforceLimits() bool {
	if m != nil {
		return m.EnforceLimits
	}
	return false
}

func (m *CommitDiffRequest) GetMaxFiles() int32 {
	if m != nil {
		return m.MaxFiles
	}
	return 0
}

func (m *CommitDiffRequest) GetMaxLines() int32 {
	if m != nil {
		return m.MaxLines
	}
	return 0
}

func (m *CommitDiffRequest) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *CommitDiffRequest) GetSafeMaxFiles() int32 {
	if m != nil {
		return m.SafeMaxFiles
	}
	return 0
}

func (m *CommitDiffRequest) GetSafeMaxLines() int32 {
	if m != nil {
		return m.SafeMaxLines
	}
	return 0
}

func (m *CommitDiffRequest) GetSafeMaxBytes() int32 {
	if m != nil {
		return m.SafeMaxBytes
	}
	return 0
}

func (m *CommitDiffRequest) GetUseMergeBase() bool {
	if m != nil {
		return m.UseMergeBase
	}
	return false
}

func (m *CommitDiffRequest) GetContextLine() uint32 {
	if m != nil {
		return m.ContextLine
	}
	return 0
}

func (m *CommitDiffRequest) GetNameOnly() bool {
	if m != nil {
		return m.NameOnly
	}
	return false
}

// A CommitDiffResponse corresponds to a single changed file in a commit.
type CommitDiffResponse struct {
	FromPath []byte `protobuf:"bytes,1,opt,name=from_path,json=fromPath,proto3" json:"from_path,omitempty"`
	ToPath   []byte `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	// Blob ID as returned via `git diff --full-index`
	FromId       string `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId         string `protobuf:"bytes,4,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	OldMode      int32  `protobuf:"varint,5,opt,name=old_mode,json=oldMode,proto3" json:"old_mode,omitempty"`
	NewMode      int32  `protobuf:"varint,6,opt,name=new_mode,json=newMode,proto3" json:"new_mode,omitempty"`
	Binary       bool   `protobuf:"varint,7,opt,name=binary,proto3" json:"binary,omitempty"`
	RawPatchData []byte `protobuf:"bytes,9,opt,name=raw_patch_data,json=rawPatchData,proto3" json:"raw_patch_data,omitempty"`
	EndOfPatch   bool   `protobuf:"varint,10,opt,name=end_of_patch,json=endOfPatch,proto3" json:"end_of_patch,omitempty"`
	// Indicates the diff file at which we overflow according to the limitations sent,
	// in which case only this attribute will be set.
	OverflowMarker       bool     `protobuf:"varint,11,opt,name=overflow_marker,json=overflowMarker,proto3" json:"overflow_marker,omitempty"`
	Collapsed            bool     `protobuf:"varint,12,opt,name=collapsed,proto3" json:"collapsed,omitempty"`
	Insertions           int64    `protobuf:"varint,13,opt,name=Insertions,proto3" json:"Insertions,omitempty"`
	Deletions            int64    `protobuf:"varint,14,opt,name=Deletions,proto3" json:"Deletions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitDiffResponse) Reset()         { *m = CommitDiffResponse{} }
func (m *CommitDiffResponse) String() string { return proto.CompactTextString(m) }
func (*CommitDiffResponse) ProtoMessage()    {}
func (*CommitDiffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{1}
}

func (m *CommitDiffResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitDiffResponse.Unmarshal(m, b)
}
func (m *CommitDiffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitDiffResponse.Marshal(b, m, deterministic)
}
func (m *CommitDiffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitDiffResponse.Merge(m, src)
}
func (m *CommitDiffResponse) XXX_Size() int {
	return xxx_messageInfo_CommitDiffResponse.Size(m)
}
func (m *CommitDiffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitDiffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitDiffResponse proto.InternalMessageInfo

func (m *CommitDiffResponse) GetFromPath() []byte {
	if m != nil {
		return m.FromPath
	}
	return nil
}

func (m *CommitDiffResponse) GetToPath() []byte {
	if m != nil {
		return m.ToPath
	}
	return nil
}

func (m *CommitDiffResponse) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *CommitDiffResponse) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *CommitDiffResponse) GetOldMode() int32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *CommitDiffResponse) GetNewMode() int32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

func (m *CommitDiffResponse) GetBinary() bool {
	if m != nil {
		return m.Binary
	}
	return false
}

func (m *CommitDiffResponse) GetRawPatchData() []byte {
	if m != nil {
		return m.RawPatchData
	}
	return nil
}

func (m *CommitDiffResponse) GetEndOfPatch() bool {
	if m != nil {
		return m.EndOfPatch
	}
	return false
}

func (m *CommitDiffResponse) GetOverflowMarker() bool {
	if m != nil {
		return m.OverflowMarker
	}
	return false
}

func (m *CommitDiffResponse) GetCollapsed() bool {
	if m != nil {
		return m.Collapsed
	}
	return false
}

func (m *CommitDiffResponse) GetInsertions() int64 {
	if m != nil {
		return m.Insertions
	}
	return 0
}

func (m *CommitDiffResponse) GetDeletions() int64 {
	if m != nil {
		return m.Deletions
	}
	return 0
}

type ChangedFilesRequest struct {
	Repository             *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LeftCommitId           string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId,proto3" json:"left_commit_id,omitempty"`
	RightCommitId          string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId,proto3" json:"right_commit_id,omitempty"`
	IgnoreWhitespaceChange bool        `protobuf:"varint,4,opt,name=ignore_whitespace_change,json=ignoreWhitespaceChange,proto3" json:"ignore_whitespace_change,omitempty"`
	Paths                  [][]byte    `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
	MaxFiles               int32       `protobuf:"varint,6,opt,name=max_files,json=maxFiles,proto3" json:"max_files,omitempty"`
	UseMergeBase           bool        `protobuf:"varint,7,opt,name=use_merge_base,json=useMergeBase,proto3" json:"use_merge_base,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}    `json:"-"`
	XXX_unrecognized       []byte      `json:"-"`
	XXX_sizecache          int32       `json:"-"`
}

func (m *ChangedFilesRequest) Reset()         { *m = ChangedFilesRequest{} }
func (m *ChangedFilesRequest) String() string { return proto.CompactTextString(m) }
func (*ChangedFilesRequest) ProtoMessage()    {}
func (*ChangedFilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{2}
}

func (m *ChangedFilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangedFilesRequest.Unmarshal(m, b)
}
func (m *ChangedFilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangedFilesRequest.Marshal(b, m, deterministic)
}
func (m *ChangedFilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangedFilesRequest.Merge(m, src)
}
func (m *ChangedFilesRequest) XXX_Size() int {
	return xxx_messageInfo_ChangedFilesRequest.Size(m)
}
func (m *ChangedFilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangedFilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangedFilesRequest proto.InternalMessageInfo

func (m *ChangedFilesRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *ChangedFilesRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *ChangedFilesRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

func (m *ChangedFilesRequest) GetIgnoreWhitespaceChange() bool {
	if m != nil {
		return m.IgnoreWhitespaceChange
	}
	return false
}

func (m *ChangedFilesRequest) GetPaths() [][]byte {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *ChangedFilesRequest) GetMaxFiles() int32 {
	if m != nil {
		return m.MaxFiles
	}
	return 0
}

func (m *ChangedFilesRequest) GetUseMergeBase() bool {
	if m != nil {
		return m.UseMergeBase
	}
	return false
}

type ChangedFilesResponse struct {
	FromPath []byte `protobuf:"bytes,1,opt,name=from_path,json=fromPath,proto3" json:"from_path,omitempty"`
	ToPath   []byte `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	// Blob ID as returned via `git diff --full-index`
	FromId               string   `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId                 string   `protobuf:"bytes,4,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	OldMode              int32    `protobuf:"varint,5,opt,name=old_mode,json=oldMode,proto3" json:"old_mode,omitempty"`
	NewMode              int32    `protobuf:"varint,6,opt,name=new_mode,json=newMode,proto3" json:"new_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangedFilesResponse) Reset()         { *m = ChangedFilesResponse{} }
func (m *ChangedFilesResponse) String() string { return proto.CompactTextString(m) }
func (*ChangedFilesResponse) ProtoMessage()    {}
func (*ChangedFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{3}
}

func (m *ChangedFilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangedFilesResponse.Unmarshal(m, b)
}
func (m *ChangedFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangedFilesResponse.Marshal(b, m, deterministic)
}
func (m *ChangedFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangedFilesResponse.Merge(m, src)
}
func (m *ChangedFilesResponse) XXX_Size() int {
	return xxx_messageInfo_ChangedFilesResponse.Size(m)
}
func (m *ChangedFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangedFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangedFilesResponse proto.InternalMessageInfo

func (m *ChangedFilesResponse) GetFromPath() []byte {
	if m != nil {
		return m.FromPath
	}
	return nil
}

func (m *ChangedFilesResponse) GetToPath() []byte {
	if m != nil {
		return m.ToPath
	}
	return nil
}

func (m *ChangedFilesResponse) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *ChangedFilesResponse) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *ChangedFilesResponse) GetOldMode() int32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *ChangedFilesResponse) GetNewMode() int32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

type CommitDeltaRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LeftCommitId         string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId,proto3" json:"left_commit_id,omitempty"`
	RightCommitId        string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId,proto3" json:"right_commit_id,omitempty"`
	Paths                [][]byte    `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CommitDeltaRequest) Reset()         { *m = CommitDeltaRequest{} }
func (m *CommitDeltaRequest) String() string { return proto.CompactTextString(m) }
func (*CommitDeltaRequest) ProtoMessage()    {}
func (*CommitDeltaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{4}
}

func (m *CommitDeltaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitDeltaRequest.Unmarshal(m, b)
}
func (m *CommitDeltaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitDeltaRequest.Marshal(b, m, deterministic)
}
func (m *CommitDeltaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitDeltaRequest.Merge(m, src)
}
func (m *CommitDeltaRequest) XXX_Size() int {
	return xxx_messageInfo_CommitDeltaRequest.Size(m)
}
func (m *CommitDeltaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitDeltaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitDeltaRequest proto.InternalMessageInfo

func (m *CommitDeltaRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CommitDeltaRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *CommitDeltaRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

func (m *CommitDeltaRequest) GetPaths() [][]byte {
	if m != nil {
		return m.Paths
	}
	return nil
}

type CommitDelta struct {
	FromPath []byte `protobuf:"bytes,1,opt,name=from_path,json=fromPath,proto3" json:"from_path,omitempty"`
	ToPath   []byte `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	// Blob ID as returned via `git diff --full-index`
	FromId               string   `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId                 string   `protobuf:"bytes,4,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	OldMode              int32    `protobuf:"varint,5,opt,name=old_mode,json=oldMode,proto3" json:"old_mode,omitempty"`
	NewMode              int32    `protobuf:"varint,6,opt,name=new_mode,json=newMode,proto3" json:"new_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitDelta) Reset()         { *m = CommitDelta{} }
func (m *CommitDelta) String() string { return proto.CompactTextString(m) }
func (*CommitDelta) ProtoMessage()    {}
func (*CommitDelta) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{5}
}

func (m *CommitDelta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitDelta.Unmarshal(m, b)
}
func (m *CommitDelta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitDelta.Marshal(b, m, deterministic)
}
func (m *CommitDelta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitDelta.Merge(m, src)
}
func (m *CommitDelta) XXX_Size() int {
	return xxx_messageInfo_CommitDelta.Size(m)
}
func (m *CommitDelta) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitDelta.DiscardUnknown(m)
}

var xxx_messageInfo_CommitDelta proto.InternalMessageInfo

func (m *CommitDelta) GetFromPath() []byte {
	if m != nil {
		return m.FromPath
	}
	return nil
}

func (m *CommitDelta) GetToPath() []byte {
	if m != nil {
		return m.ToPath
	}
	return nil
}

func (m *CommitDelta) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *CommitDelta) GetToId() string {
	if m != nil {
		return m.ToId
	}
	return ""
}

func (m *CommitDelta) GetOldMode() int32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *CommitDelta) GetNewMode() int32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

type CommitDeltaResponse struct {
	Deltas               []*CommitDelta `protobuf:"bytes,1,rep,name=deltas,proto3" json:"deltas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CommitDeltaResponse) Reset()         { *m = CommitDeltaResponse{} }
func (m *CommitDeltaResponse) String() string { return proto.CompactTextString(m) }
func (*CommitDeltaResponse) ProtoMessage()    {}
func (*CommitDeltaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{6}
}

func (m *CommitDeltaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitDeltaResponse.Unmarshal(m, b)
}
func (m *CommitDeltaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitDeltaResponse.Marshal(b, m, deterministic)
}
func (m *CommitDeltaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitDeltaResponse.Merge(m, src)
}
func (m *CommitDeltaResponse) XXX_Size() int {
	return xxx_messageInfo_CommitDeltaResponse.Size(m)
}
func (m *CommitDeltaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitDeltaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitDeltaResponse proto.InternalMessageInfo

func (m *CommitDeltaResponse) GetDeltas() []*CommitDelta {
	if m != nil {
		return m.Deltas
	}
	return nil
}

type CommitPatchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Revision             []byte      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CommitPatchRequest) Reset()         { *m = CommitPatchRequest{} }
func (m *CommitPatchRequest) String() string { return proto.CompactTextString(m) }
func (*CommitPatchRequest) ProtoMessage()    {}
func (*CommitPatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{7}
}

func (m *CommitPatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitPatchRequest.Unmarshal(m, b)
}
func (m *CommitPatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitPatchRequest.Marshal(b, m, deterministic)
}
func (m *CommitPatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitPatchRequest.Merge(m, src)
}
func (m *CommitPatchRequest) XXX_Size() int {
	return xxx_messageInfo_CommitPatchRequest.Size(m)
}
func (m *CommitPatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitPatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitPatchRequest proto.InternalMessageInfo

func (m *CommitPatchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *CommitPatchRequest) GetRevision() []byte {
	if m != nil {
		return m.Revision
	}
	return nil
}

type CommitPatchResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitPatchResponse) Reset()         { *m = CommitPatchResponse{} }
func (m *CommitPatchResponse) String() string { return proto.CompactTextString(m) }
func (*CommitPatchResponse) ProtoMessage()    {}
func (*CommitPatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{8}
}

func (m *CommitPatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitPatchResponse.Unmarshal(m, b)
}
func (m *CommitPatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitPatchResponse.Marshal(b, m, deterministic)
}
func (m *CommitPatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitPatchResponse.Merge(m, src)
}
func (m *CommitPatchResponse) XXX_Size() int {
	return xxx_messageInfo_CommitPatchResponse.Size(m)
}
func (m *CommitPatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitPatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitPatchResponse proto.InternalMessageInfo

func (m *CommitPatchResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RawDiffRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LeftCommitId         string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId,proto3" json:"left_commit_id,omitempty"`
	RightCommitId        string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId,proto3" json:"right_commit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RawDiffRequest) Reset()         { *m = RawDiffRequest{} }
func (m *RawDiffRequest) String() string { return proto.CompactTextString(m) }
func (*RawDiffRequest) ProtoMessage()    {}
func (*RawDiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{9}
}

func (m *RawDiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawDiffRequest.Unmarshal(m, b)
}
func (m *RawDiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawDiffRequest.Marshal(b, m, deterministic)
}
func (m *RawDiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawDiffRequest.Merge(m, src)
}
func (m *RawDiffRequest) XXX_Size() int {
	return xxx_messageInfo_RawDiffRequest.Size(m)
}
func (m *RawDiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RawDiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RawDiffRequest proto.InternalMessageInfo

func (m *RawDiffRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RawDiffRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *RawDiffRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

type RawDiffResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawDiffResponse) Reset()         { *m = RawDiffResponse{} }
func (m *RawDiffResponse) String() string { return proto.CompactTextString(m) }
func (*RawDiffResponse) ProtoMessage()    {}
func (*RawDiffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{10}
}

func (m *RawDiffResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawDiffResponse.Unmarshal(m, b)
}
func (m *RawDiffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawDiffResponse.Marshal(b, m, deterministic)
}
func (m *RawDiffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawDiffResponse.Merge(m, src)
}
func (m *RawDiffResponse) XXX_Size() int {
	return xxx_messageInfo_RawDiffResponse.Size(m)
}
func (m *RawDiffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RawDiffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RawDiffResponse proto.InternalMessageInfo

func (m *RawDiffResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RawPatchRequest struct {
	Repository           *Repository `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LeftCommitId         string      `protobuf:"bytes,2,opt,name=left_commit_id,json=leftCommitId,proto3" json:"left_commit_id,omitempty"`
	RightCommitId        string      `protobuf:"bytes,3,opt,name=right_commit_id,json=rightCommitId,proto3" json:"right_commit_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RawPatchRequest) Reset()         { *m = RawPatchRequest{} }
func (m *RawPatchRequest) String() string { return proto.CompactTextString(m) }
func (*RawPatchRequest) ProtoMessage()    {}
func (*RawPatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{11}
}

func (m *RawPatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawPatchRequest.Unmarshal(m, b)
}
func (m *RawPatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawPatchRequest.Marshal(b, m, deterministic)
}
func (m *RawPatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawPatchRequest.Merge(m, src)
}
func (m *RawPatchRequest) XXX_Size() int {
	return xxx_messageInfo_RawPatchRequest.Size(m)
}
func (m *RawPatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RawPatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RawPatchRequest proto.InternalMessageInfo

func (m *RawPatchRequest) GetRepository() *Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *RawPatchRequest) GetLeftCommitId() string {
	if m != nil {
		return m.LeftCommitId
	}
	return ""
}

func (m *RawPatchRequest) GetRightCommitId() string {
	if m != nil {
		return m.RightCommitId
	}
	return ""
}

type RawPatchResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawPatchResponse) Reset()         { *m = RawPatchResponse{} }
func (m *RawPatchResponse) String() string { return proto.CompactTextString(m) }
func (*RawPatchResponse) ProtoMessage()    {}
func (*RawPatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{12}
}

func (m *RawPatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawPatchResponse.Unmarshal(m, b)
}
func (m *RawPatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawPatchResponse.Marshal(b, m, deterministic)
}
func (m *RawPatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawPatchResponse.Merge(m, src)
}
func (m *RawPatchResponse) XXX_Size() int {
	return xxx_messageInfo_RawPatchResponse.Size(m)
}
func (m *RawPatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RawPatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RawPatchResponse proto.InternalMessageInfo

func (m *RawPatchResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitDiffRequest)(nil), "satellite.CommitDiffRequest")
	proto.RegisterType((*CommitDiffResponse)(nil), "satellite.CommitDiffResponse")
	proto.RegisterType((*ChangedFilesRequest)(nil), "satellite.ChangedFilesRequest")
	proto.RegisterType((*ChangedFilesResponse)(nil), "satellite.ChangedFilesResponse")
	proto.RegisterType((*CommitDeltaRequest)(nil), "satellite.CommitDeltaRequest")
	proto.RegisterType((*CommitDelta)(nil), "satellite.CommitDelta")
	proto.RegisterType((*CommitDeltaResponse)(nil), "satellite.CommitDeltaResponse")
	proto.RegisterType((*CommitPatchRequest)(nil), "satellite.CommitPatchRequest")
	proto.RegisterType((*CommitPatchResponse)(nil), "satellite.CommitPatchResponse")
	proto.RegisterType((*RawDiffRequest)(nil), "satellite.RawDiffRequest")
	proto.RegisterType((*RawDiffResponse)(nil), "satellite.RawDiffResponse")
	proto.RegisterType((*RawPatchRequest)(nil), "satellite.RawPatchRequest")
	proto.RegisterType((*RawPatchResponse)(nil), "satellite.RawPatchResponse")
}

func init() { proto.RegisterFile("diff.proto", fileDescriptor_686521effc814b25) }

var fileDescriptor_686521effc814b25 = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0xfd, 0x68, 0xfd, 0x51, 0x57, 0xb4, 0xec, 0x6f, 0x9c, 0x38, 0x8c, 0x92, 0xb8, 0x2a, 0xd1,
	0xa4, 0xea, 0x46, 0x28, 0x5c, 0x14, 0xe8, 0xda, 0x71, 0x5b, 0xb8, 0x88, 0x10, 0x83, 0x59, 0x74,
	0x49, 0x8c, 0xc8, 0x4b, 0x69, 0x50, 0x92, 0xa3, 0xce, 0x8c, 0x2d, 0xeb, 0x41, 0x5a, 0xa0, 0x4f,
	0xd0, 0x55, 0xd1, 0x3e, 0x54, 0xfb, 0x1e, 0xc5, 0x0c, 0x7f, 0x44, 0x46, 0x56, 0x37, 0xcd, 0xc2,
	0xe8, 0x4e, 0x73, 0xce, 0x99, 0x7b, 0xef, 0xdc, 0x73, 0x67, 0x28, 0x80, 0x88, 0xc5, 0xf1, 0x74,
	0x25, 0xb8, 0xe2, 0xa4, 0x2f, 0xa9, 0xc2, 0x24, 0x61, 0x0a, 0x47, 0x8e, 0x5c, 0x52, 0x81, 0x51,
	0x4e, 0x78, 0x7f, 0xb5, 0xe1, 0xff, 0xaf, 0x79, 0x9a, 0x32, 0x75, 0xc9, 0xe2, 0xd8, 0xc7, 0x1f,
	0x6f, 0x50, 0x2a, 0xf2, 0x25, 0x80, 0xc0, 0x15, 0x97, 0x4c, 0x71, 0xb1, 0x71, 0xad, 0xb1, 0x35,
	0x19, 0x9c, 0x3f, 0x9e, 0x56, 0x31, 0xa6, 0x7e, 0x45, 0xfa, 0x35, 0x21, 0xf9, 0x04, 0x86, 0x09,
	0xc6, 0x2a, 0x08, 0x4d, 0xc0, 0x80, 0x45, 0xee, 0xc1, 0xd8, 0x9a, 0xf4, 0x7d, 0x47, 0xa3, 0x79,
	0x96, 0xab, 0x88, 0xbc, 0x82, 0x23, 0xc1, 0x16, 0xcb, 0xba, 0xac, 0x65, 0x64, 0x87, 0x06, 0xae,
	0x74, 0x5f, 0x81, 0xcb, 0x16, 0x19, 0x17, 0x18, 0xac, 0x97, 0x4c, 0xa1, 0x5c, 0xd1, 0x10, 0x83,
	0x70, 0x49, 0xb3, 0x05, 0xba, 0xed, 0xb1, 0x35, 0xb1, 0xfd, 0xd3, 0x9c, 0xff, 0xbe, 0xa2, 0x5f,
	0x1b, 0x96, 0x3c, 0x82, 0xce, 0x8a, 0xaa, 0xa5, 0x74, 0x3b, 0xe3, 0xd6, 0xc4, 0xf1, 0xf3, 0x05,
	0x79, 0x09, 0xc3, 0x90, 0x27, 0x09, 0x5d, 0x49, 0x0c, 0x74, 0x6b, 0xa4, 0xdb, 0x35, 0x51, 0x0e,
	0x4b, 0x54, 0x77, 0xc0, 0xc8, 0x30, 0x8b, 0xb9, 0x08, 0x31, 0x48, 0x58, 0xca, 0x94, 0x74, 0x7b,
	0xb9, 0xac, 0x40, 0xdf, 0x18, 0x90, 0x3c, 0x83, 0x7e, 0x4a, 0xef, 0x82, 0x98, 0x25, 0x28, 0x5d,
	0x7b, 0x6c, 0x4d, 0x3a, 0xbe, 0x9d, 0xd2, 0xbb, 0x6f, 0xf4, 0xba, 0x24, 0x13, 0x96, 0xa1, 0x74,
	0xfb, 0x15, 0xf9, 0x46, 0xaf, 0x4b, 0x72, 0xbe, 0x51, 0x28, 0x5d, 0xa8, 0xc8, 0x0b, 0xbd, 0xd6,
	0x2d, 0x94, 0x34, 0xc6, 0x60, 0x1b, 0x7b, 0x60, 0x14, 0x8e, 0x46, 0x67, 0x65, 0xfc, 0xba, 0x2a,
	0x4f, 0xe2, 0x34, 0x54, 0x79, 0xa2, 0xba, 0x2a, 0xcf, 0x76, 0xd8, 0x50, 0x55, 0x19, 0x6f, 0x24,
	0x06, 0x29, 0x8a, 0x05, 0x06, 0x73, 0x2a, 0xd1, 0x1d, 0x9a, 0xf3, 0x3a, 0x37, 0x12, 0x67, 0x1a,
	0xbc, 0xa0, 0x12, 0xc9, 0xc7, 0xe0, 0x84, 0x3c, 0x53, 0x78, 0xa7, 0x4c, 0x42, 0xf7, 0x68, 0x6c,
	0x4d, 0x0e, 0xfd, 0x41, 0x81, 0xe9, 0x7c, 0xfa, 0x5c, 0x19, 0x4d, 0x31, 0xe0, 0x59, 0xb2, 0x71,
	0x8f, 0x4d, 0x0c, 0x5b, 0x03, 0x6f, 0xb3, 0x64, 0xe3, 0xfd, 0xd2, 0x02, 0x52, 0x9f, 0x33, 0xb9,
	0xe2, 0x99, 0x34, 0x7b, 0x62, 0xc1, 0xd3, 0x40, 0x3b, 0x64, 0xe6, 0xcc, 0xf1, 0x6d, 0x0d, 0x5c,
	0x53, 0xb5, 0x24, 0x4f, 0xa0, 0xa7, 0x78, 0x4e, 0x1d, 0x18, 0xaa, 0xab, 0x78, 0x49, 0x98, 0x5d,
	0xd5, 0xe4, 0x74, 0xf5, 0xf2, 0x2a, 0x22, 0x27, 0xd0, 0x51, 0x5c, 0xc3, 0x6d, 0x03, 0xb7, 0x15,
	0xbf, 0x8a, 0xc8, 0x53, 0xb0, 0x79, 0x12, 0x05, 0x29, 0x8f, 0xd0, 0xed, 0x98, 0x06, 0xf4, 0x78,
	0x12, 0xcd, 0x78, 0x84, 0x9a, 0xca, 0x70, 0x9d, 0x53, 0xdd, 0x9c, 0xca, 0x70, 0x6d, 0xa8, 0x53,
	0xe8, 0xce, 0x59, 0x46, 0xc5, 0xa6, 0xb0, 0xbf, 0x58, 0xe9, 0x76, 0x09, 0xba, 0xd6, 0x55, 0x85,
	0xcb, 0x20, 0xa2, 0x8a, 0x1a, 0x7f, 0x1d, 0xdf, 0x11, 0x74, 0x7d, 0xad, 0xc1, 0x4b, 0xaa, 0x28,
	0x19, 0x83, 0x83, 0x59, 0x14, 0xf0, 0x38, 0x17, 0x1a, 0x9b, 0x6d, 0x1f, 0x30, 0x8b, 0xde, 0xc6,
	0x46, 0x45, 0x3e, 0x85, 0x23, 0x7e, 0x8b, 0x22, 0x4e, 0xf8, 0x3a, 0x48, 0xa9, 0xf8, 0x01, 0x85,
	0x71, 0xda, 0xf6, 0x87, 0x25, 0x3c, 0x33, 0x28, 0x79, 0x0e, 0xfd, 0x72, 0x40, 0x23, 0x63, 0xb3,
	0xed, 0x6f, 0x01, 0x72, 0x06, 0x70, 0x95, 0x49, 0x14, 0x8a, 0xf1, 0x2c, 0xf7, 0xb7, 0xe5, 0xd7,
	0x10, 0xbd, 0xfb, 0x12, 0x13, 0xcc, 0xe9, 0xa1, 0xa1, 0xb7, 0xc0, 0x77, 0x6d, 0xdb, 0x3e, 0xee,
	0x7b, 0xbf, 0x1d, 0xc0, 0x49, 0x7e, 0x73, 0x22, 0x33, 0x5e, 0xff, 0xe9, 0x57, 0xa0, 0x71, 0x6f,
	0xbb, 0xef, 0xdd, 0xdb, 0xdd, 0xbb, 0xd0, 0xdb, 0xbd, 0x0b, 0xde, 0x1f, 0x16, 0x3c, 0x6a, 0xf6,
	0xeb, 0xa1, 0x4f, 0xb3, 0xf7, 0xbb, 0x55, 0x5d, 0x3f, 0x4c, 0x14, 0x7d, 0x50, 0x0e, 0x57, 0x3e,
	0xb5, 0x6b, 0x3e, 0x79, 0xbf, 0x5a, 0x30, 0xa8, 0x55, 0xfc, 0x80, 0x7b, 0xfb, 0x35, 0x9c, 0x34,
	0x5a, 0x5b, 0x0c, 0xc3, 0x14, 0xba, 0x91, 0x06, 0xa4, 0x6b, 0x8d, 0x5b, 0x93, 0xc1, 0xf9, 0x69,
	0xad, 0xaf, 0x75, 0x7d, 0xa1, 0xf2, 0x16, 0xa5, 0x43, 0xe6, 0x7d, 0xf8, 0x97, 0x0e, 0x8d, 0xc0,
	0x16, 0x78, 0xcb, 0x24, 0xe3, 0x59, 0xd1, 0x91, 0x6a, 0xed, 0x7d, 0x56, 0xd6, 0x5b, 0x24, 0x2a,
	0xea, 0x25, 0xd0, 0x36, 0xcf, 0x59, 0xde, 0x5b, 0xf3, 0xdb, 0xfb, 0xc9, 0x82, 0xa1, 0x4f, 0xd7,
	0x0f, 0xed, 0xaf, 0x81, 0xf7, 0x12, 0x8e, 0xaa, 0xb2, 0xfe, 0xa1, 0xfc, 0x9f, 0x2d, 0xa3, 0xfb,
	0x10, 0x0d, 0xfd, 0xb0, 0xf5, 0xbf, 0x82, 0xe3, 0x6d, 0x5d, 0xfb, 0x0f, 0x70, 0xfe, 0x67, 0x0b,
	0x06, 0xfa, 0x94, 0xef, 0x50, 0xdc, 0xb2, 0x10, 0xc9, 0x0c, 0x60, 0xfb, 0x11, 0x25, 0xcf, 0x77,
	0x27, 0x6a, 0x6b, 0xd4, 0xe8, 0xc5, 0x1e, 0x36, 0x4f, 0xe7, 0xfd, 0xef, 0x73, 0x8b, 0xbc, 0x03,
	0xa7, 0xfe, 0x8e, 0x91, 0xb3, 0xfa, 0x96, 0xdd, 0x0f, 0xc2, 0xe8, 0xa3, 0xbd, 0x7c, 0x2d, 0xe8,
	0x75, 0xf3, 0xde, 0xbe, 0xd8, 0x33, 0xf6, 0x45, 0xc8, 0xb3, 0x7d, 0xf4, 0x7d, 0x11, 0xf3, 0x2f,
	0xe7, 0x6e, 0xc4, 0xba, 0xc1, 0xf7, 0x44, 0x6c, 0xf4, 0xd9, 0x44, 0xbc, 0x84, 0x5e, 0x31, 0x3f,
	0xe4, 0x69, 0xdd, 0xfb, 0xc6, 0xa8, 0x8f, 0x46, 0xf7, 0x51, 0xb5, 0x28, 0xdf, 0x82, 0x5d, 0xba,
	0x48, 0xde, 0xd3, 0x36, 0x2a, 0x7a, 0x76, 0x2f, 0xb7, 0x0d, 0x74, 0xf1, 0x04, 0x1e, 0x87, 0x3c,
	0x9d, 0xd2, 0x84, 0xcd, 0xe9, 0x9c, 0x4e, 0xe9, 0x82, 0xa9, 0xe9, 0x42, 0xac, 0xc2, 0x79, 0xd7,
	0xfc, 0x49, 0xff, 0xe2, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x7e, 0x21, 0x4c, 0xcb, 0x0b,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiffServiceClient is the client API for DiffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiffServiceClient interface {
	// Returns stream of CommitDiffResponse with patches chunked over messages
	CommitDiff(ctx context.Context, in *CommitDiffRequest, opts ...grpc.CallOption) (DiffService_CommitDiffClient, error)
	// Return a stream of changed file names only (use git diff-tree instead of libgit2 difftreetotree)
	ChangedFiles(ctx context.Context, in *ChangedFilesRequest, opts ...grpc.CallOption) (DiffService_ChangedFilesClient, error)
	// Return a stream so we can divide the response in chunks of deltas
	CommitDelta(ctx context.Context, in *CommitDeltaRequest, opts ...grpc.CallOption) (DiffService_CommitDeltaClient, error)
	CommitPatch(ctx context.Context, in *CommitPatchRequest, opts ...grpc.CallOption) (DiffService_CommitPatchClient, error)
	RawDiff(ctx context.Context, in *RawDiffRequest, opts ...grpc.CallOption) (DiffService_RawDiffClient, error)
	RawPatch(ctx context.Context, in *RawPatchRequest, opts ...grpc.CallOption) (DiffService_RawPatchClient, error)
}

type diffServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiffServiceClient(cc *grpc.ClientConn) DiffServiceClient {
	return &diffServiceClient{cc}
}

func (c *diffServiceClient) CommitDiff(ctx context.Context, in *CommitDiffRequest, opts ...grpc.CallOption) (DiffService_CommitDiffClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiffService_serviceDesc.Streams[0], "/satellite.DiffService/CommitDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffServiceCommitDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffService_CommitDiffClient interface {
	Recv() (*CommitDiffResponse, error)
	grpc.ClientStream
}

type diffServiceCommitDiffClient struct {
	grpc.ClientStream
}

func (x *diffServiceCommitDiffClient) Recv() (*CommitDiffResponse, error) {
	m := new(CommitDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diffServiceClient) ChangedFiles(ctx context.Context, in *ChangedFilesRequest, opts ...grpc.CallOption) (DiffService_ChangedFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiffService_serviceDesc.Streams[1], "/satellite.DiffService/ChangedFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffServiceChangedFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffService_ChangedFilesClient interface {
	Recv() (*ChangedFilesResponse, error)
	grpc.ClientStream
}

type diffServiceChangedFilesClient struct {
	grpc.ClientStream
}

func (x *diffServiceChangedFilesClient) Recv() (*ChangedFilesResponse, error) {
	m := new(ChangedFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diffServiceClient) CommitDelta(ctx context.Context, in *CommitDeltaRequest, opts ...grpc.CallOption) (DiffService_CommitDeltaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiffService_serviceDesc.Streams[2], "/satellite.DiffService/CommitDelta", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffServiceCommitDeltaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffService_CommitDeltaClient interface {
	Recv() (*CommitDeltaResponse, error)
	grpc.ClientStream
}

type diffServiceCommitDeltaClient struct {
	grpc.ClientStream
}

func (x *diffServiceCommitDeltaClient) Recv() (*CommitDeltaResponse, error) {
	m := new(CommitDeltaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diffServiceClient) CommitPatch(ctx context.Context, in *CommitPatchRequest, opts ...grpc.CallOption) (DiffService_CommitPatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiffService_serviceDesc.Streams[3], "/satellite.DiffService/CommitPatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffServiceCommitPatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffService_CommitPatchClient interface {
	Recv() (*CommitPatchResponse, error)
	grpc.ClientStream
}

type diffServiceCommitPatchClient struct {
	grpc.ClientStream
}

func (x *diffServiceCommitPatchClient) Recv() (*CommitPatchResponse, error) {
	m := new(CommitPatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diffServiceClient) RawDiff(ctx context.Context, in *RawDiffRequest, opts ...grpc.CallOption) (DiffService_RawDiffClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiffService_serviceDesc.Streams[4], "/satellite.DiffService/RawDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffServiceRawDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffService_RawDiffClient interface {
	Recv() (*RawDiffResponse, error)
	grpc.ClientStream
}

type diffServiceRawDiffClient struct {
	grpc.ClientStream
}

func (x *diffServiceRawDiffClient) Recv() (*RawDiffResponse, error) {
	m := new(RawDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diffServiceClient) RawPatch(ctx context.Context, in *RawPatchRequest, opts ...grpc.CallOption) (DiffService_RawPatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiffService_serviceDesc.Streams[5], "/satellite.DiffService/RawPatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffServiceRawPatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffService_RawPatchClient interface {
	Recv() (*RawPatchResponse, error)
	grpc.ClientStream
}

type diffServiceRawPatchClient struct {
	grpc.ClientStream
}

func (x *diffServiceRawPatchClient) Recv() (*RawPatchResponse, error) {
	m := new(RawPatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiffServiceServer is the server API for DiffService service.
type DiffServiceServer interface {
	// Returns stream of CommitDiffResponse with patches chunked over messages
	CommitDiff(*CommitDiffRequest, DiffService_CommitDiffServer) error
	// Return a stream of changed file names only (use git diff-tree instead of libgit2 difftreetotree)
	ChangedFiles(*ChangedFilesRequest, DiffService_ChangedFilesServer) error
	// Return a stream so we can divide the response in chunks of deltas
	CommitDelta(*CommitDeltaRequest, DiffService_CommitDeltaServer) error
	CommitPatch(*CommitPatchRequest, DiffService_CommitPatchServer) error
	RawDiff(*RawDiffRequest, DiffService_RawDiffServer) error
	RawPatch(*RawPatchRequest, DiffService_RawPatchServer) error
}

// UnimplementedDiffServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiffServiceServer struct {
}

func (*UnimplementedDiffServiceServer) CommitDiff(req *CommitDiffRequest, srv DiffService_CommitDiffServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitDiff not implemented")
}
func (*UnimplementedDiffServiceServer) ChangedFiles(req *ChangedFilesRequest, srv DiffService_ChangedFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ChangedFiles not implemented")
}
func (*UnimplementedDiffServiceServer) CommitDelta(req *CommitDeltaRequest, srv DiffService_CommitDeltaServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitDelta not implemented")
}
func (*UnimplementedDiffServiceServer) CommitPatch(req *CommitPatchRequest, srv DiffService_CommitPatchServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitPatch not implemented")
}
func (*UnimplementedDiffServiceServer) RawDiff(req *RawDiffRequest, srv DiffService_RawDiffServer) error {
	return status.Errorf(codes.Unimplemented, "method RawDiff not implemented")
}
func (*UnimplementedDiffServiceServer) RawPatch(req *RawPatchRequest, srv DiffService_RawPatchServer) error {
	return status.Errorf(codes.Unimplemented, "method RawPatch not implemented")
}

func RegisterDiffServiceServer(s *grpc.Server, srv DiffServiceServer) {
	s.RegisterService(&_DiffService_serviceDesc, srv)
}

func _DiffService_CommitDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServiceServer).CommitDiff(m, &diffServiceCommitDiffServer{stream})
}

type DiffService_CommitDiffServer interface {
	Send(*CommitDiffResponse) error
	grpc.ServerStream
}

type diffServiceCommitDiffServer struct {
	grpc.ServerStream
}

func (x *diffServiceCommitDiffServer) Send(m *CommitDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiffService_ChangedFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangedFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServiceServer).ChangedFiles(m, &diffServiceChangedFilesServer{stream})
}

type DiffService_ChangedFilesServer interface {
	Send(*ChangedFilesResponse) error
	grpc.ServerStream
}

type diffServiceChangedFilesServer struct {
	grpc.ServerStream
}

func (x *diffServiceChangedFilesServer) Send(m *ChangedFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiffService_CommitDelta_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitDeltaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServiceServer).CommitDelta(m, &diffServiceCommitDeltaServer{stream})
}

type DiffService_CommitDeltaServer interface {
	Send(*CommitDeltaResponse) error
	grpc.ServerStream
}

type diffServiceCommitDeltaServer struct {
	grpc.ServerStream
}

func (x *diffServiceCommitDeltaServer) Send(m *CommitDeltaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiffService_CommitPatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommitPatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServiceServer).CommitPatch(m, &diffServiceCommitPatchServer{stream})
}

type DiffService_CommitPatchServer interface {
	Send(*CommitPatchResponse) error
	grpc.ServerStream
}

type diffServiceCommitPatchServer struct {
	grpc.ServerStream
}

func (x *diffServiceCommitPatchServer) Send(m *CommitPatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiffService_RawDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServiceServer).RawDiff(m, &diffServiceRawDiffServer{stream})
}

type DiffService_RawDiffServer interface {
	Send(*RawDiffResponse) error
	grpc.ServerStream
}

type diffServiceRawDiffServer struct {
	grpc.ServerStream
}

func (x *diffServiceRawDiffServer) Send(m *RawDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiffService_RawPatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawPatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffServiceServer).RawPatch(m, &diffServiceRawPatchServer{stream})
}

type DiffService_RawPatchServer interface {
	Send(*RawPatchResponse) error
	grpc.ServerStream
}

type diffServiceRawPatchServer struct {
	grpc.ServerStream
}

func (x *diffServiceRawPatchServer) Send(m *RawPatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DiffService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "satellite.DiffService",
	HandlerType: (*DiffServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitDiff",
			Handler:       _DiffService_CommitDiff_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChangedFiles",
			Handler:       _DiffService_ChangedFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CommitDelta",
			Handler:       _DiffService_CommitDelta_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CommitPatch",
			Handler:       _DiffService_CommitPatch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RawDiff",
			Handler:       _DiffService_RawDiff_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RawPatch",
			Handler:       _DiffService_RawPatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diff.proto",
}
